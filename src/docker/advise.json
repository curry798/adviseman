{
  "--config": {
    "#desc": "Location of client config files",
    "#1": {
      "#desc": "string"
    }
  },
  "-c|--context": {
    "#desc": "Name of the context to use to connect to the daemon",
    "#1": {
      "#desc": "string"
    }
  },
  "-D|--debug": {
    "#desc": "Enable debug mode"
  },
  "-H|--host": {
    "#desc": "Daemon socket to connect to",
    "#1": {
      "#desc": "list"
    }
  },
  "-l|--log-level": {
    "#desc": "Set the logging level",
    "#1": {
      "#desc": "string"
    }
  },
  "--tls": {
    "#desc": "Use TLS; implied by --tlsverify"
  },
  "--tlscacert": {
    "#desc": "Trust certs signed only by this CA",
    "#1": {
      "#desc": "string"
    }
  },
  "--tlscert": {
    "#desc": "Path to TLS certificate file",
    "#1": {
      "#desc": "string"
    }
  },
  "--tlskey": {
    "#desc": "Path to TLS key file",
    "#1": {
      "#desc": "string"
    }
  },
  "--tlsverify": {
    "#desc": "Use TLS and verify the remote"
  },
  "-v|--version": {
    "#desc": "Print version information and quit"
  },
  "container": {
    "#desc": "Manage containers"
  },
  "context": {
    "-h|--help": {
      "#desc": "Help for context"
    },
    "#desc": "Manage contexts"
  },
  "image": {
    "#desc": "Manage images"
  },
  "manifest": {
    "#desc": "Manage Docker image manifests and manifest lists"
  },
  "network": {
    "#desc": "Manage networks"
  },
  "node": {
    "#desc": "Manage Swarm nodes"
  },
  "plugin": {
    "#desc": "Manage plugins"
  },
  "scan": {
    "--accept-license": {
      "#desc": "Accept using a third party scanning provider"
    },
    "--dependency-tree": {
      "#desc": "Show dependency tree with scan results"
    },
    "--exclude-base": {
      "#desc": "Exclude base image from vulnerability scanning "
    },
    "-f|--file": {
      "#desc": "Dockerfile associated with image, provides more detailed results"
    },
    "--group-issues": {
      "#desc": "Aggregate duplicated vulnerabilities and group them to a single one "
    },
    "--json": {
      "#desc": "Output results in JSON format"
    },
    "--login": {
      "#desc": "Authenticate to the scan provider using an optional token , or web base token if empty"
    },
    "--reject-license": {
      "#desc": "Reject using a third party scanning provider"
    },
    "--severity": {
      "#desc": "Only report vulnerabilities of provided level or higher "
    },
    "--token": {
      "#desc": "Authentication token to login to the third party scanning provider"
    },
    "--version": {
      "#desc": "Display version of the scan plugin"
    },
    "#desc": "Docker Scan "
  },
  "secret": {
    "#desc": "Manage Docker secrets"
  },
  "service": {
    "#desc": "Manage services"
  },
  "stack": {
    "--orchestrator": {
      "#desc": "Orchestrator to use "
    },
    "#desc": "Manage Docker stacks"
  },
  "swarm": {
    "#desc": "Manage Swarm"
  },
  "system": {
    "#desc": "Manage Docker"
  },
  "trust": {
    "#desc": "Manage trust on Docker images"
  },
  "volume": {
    "#desc": "Manage volumes"
  },
  "build": {
    "--add-host": {
      "#desc": "Add a custom host-to-IP mapping "
    },
    "--build-arg": {
      "#desc": "Set build-time variables"
    },
    "--cache-from": {
      "#desc": "Images to consider as cache sources"
    },
    "--disable-content-trust": {
      "#desc": "Skip image verification "
    },
    "-f|--file": {
      "#desc": "Name of the Dockerfile "
    },
    "--iidfile": {
      "#desc": "Write the image ID to the file"
    },
    "--isolation": {
      "#desc": "Container isolation technology"
    },
    "--label": {
      "#desc": "Set metadata for an image"
    },
    "--network": {
      "#desc": "Set the networking mode for the RUN instructions during build "
    },
    "--no-cache": {
      "#desc": "Do not use cache when building the image"
    },
    "-o|--output": {
      "#desc": "Output destination "
    },
    "--platform": {
      "#desc": "Set platform if server is multi-platform capable"
    },
    "--progress": {
      "#desc": "Set type of progress output "
    },
    "--pull": {
      "#desc": "Always attempt to pull a newer version of the image"
    },
    "-q|--quiet": {
      "#desc": "Suppress the build output and print image ID on success"
    },
    "--secret": {
      "#desc": "Secret file to expose to the build : id=mysecret,src=/local/secret"
    },
    "--ssh": {
      "#desc": "SSH agent socket or keys to expose to the build  (format: default|"
    },
    "-t|--tag": {
      "#desc": "Name and optionally a tag in the 'name:tag' format"
    },
    "--target": {
      "#desc": "Set the target build stage to build."
    },
    "#desc": "Build an image from a Dockerfile"
  },
  "commit": {
    "-a|--author": {
      "#desc": "Author "
    },
    "-c|--change": {
      "#desc": "Apply Dockerfile instruction to the created image"
    },
    "-m|--message": {
      "#desc": "Commit message"
    },
    "-p|--pause": {
      "#desc": "Pause container during commit "
    },
    "#desc": "Create a new image from a container's changes"
  },
  "cp": {
    "-a|--archive": {
      "#desc": "Archive mode "
    },
    "-L|--follow-link": {
      "#desc": "Always follow symbol link in SRC_PATH"
    },
    "#desc": "Copy files/folders between a container and the local filesystem"
  },
  "create": {
    "--add-host": {
      "#desc": "Add a custom host-to-IP mapping "
    },
    "-a|--attach": {
      "#desc": "Attach to STDIN, STDOUT or STDERR"
    },
    "--blkio-weight": {
      "#desc": "Block IO "
    },
    "--blkio-weight-device": {
      "#desc": "Block IO weight "
    },
    "--cap-add": {
      "#desc": "Add Linux capabilities"
    },
    "--cap-drop": {
      "#desc": "Drop Linux capabilities"
    },
    "--cgroup-parent": {
      "#desc": "Optional parent cgroup for the container"
    },
    "--cgroupns": {
      "#desc": "Cgroup namespace to use "
    },
    "--cidfile": {
      "#desc": "Write the container ID to the file"
    },
    "--cpu-period": {
      "#desc": "Limit CPU CFS  period"
    },
    "--cpu-quota": {
      "#desc": "Limit CPU CFS  quota"
    },
    "--cpu-rt-period": {
      "#desc": "Limit CPU real-time period in microseconds"
    },
    "--cpu-rt-runtime": {
      "#desc": "Limit CPU real-time runtime in microseconds"
    },
    "-c|--cpu-shares": {
      "#desc": "CPU shares "
    },
    "--cpus": {
      "#desc": "Number of CPUs"
    },
    "--cpuset-cpus": {
      "#desc": "CPUs in which to allow execution "
    },
    "--cpuset-mems": {
      "#desc": "MEMs in which to allow execution "
    },
    "--device": {
      "#desc": "Add a host device to the container"
    },
    "--device-cgroup-rule": {
      "#desc": "Add a rule to the cgroup allowed devices list"
    },
    "--device-read-bps": {
      "#desc": "Limit read rate "
    },
    "--device-read-iops": {
      "#desc": "Limit read rate "
    },
    "--device-write-bps": {
      "#desc": "Limit write rate "
    },
    "--device-write-iops": {
      "#desc": "Limit write rate "
    },
    "--disable-content-trust": {
      "#desc": "Skip image verification "
    },
    "--dns": {
      "#desc": "Set custom DNS servers"
    },
    "--dns-option": {
      "#desc": "Set DNS options"
    },
    "--dns-search": {
      "#desc": "Set custom DNS search domains"
    },
    "--domainname": {
      "#desc": "Container NIS domain name"
    },
    "--entrypoint": {
      "#desc": "Overwrite the default ENTRYPOINT of the image"
    },
    "-e|--env": {
      "#desc": "Set environment variables"
    },
    "--env-file": {
      "#desc": "Read in a file of environment variables"
    },
    "--expose": {
      "#desc": "Expose a port or a range of ports"
    },
    "--gpus": {
      "#desc": "GPU devices to add to the container "
    },
    "--group-add": {
      "#desc": "Add additional groups to join"
    },
    "--health-cmd": {
      "#desc": "Command to run to check health"
    },
    "--health-interval": {
      "#desc": "Time between running the check "
    },
    "--health-retries": {
      "#desc": "Consecutive failures needed to report unhealthy"
    },
    "--health-start-period": {
      "#desc": "Start period for the container to initialize before starting health-retries countdown "
    },
    "--health-timeout": {
      "#desc": "Maximum time to allow one check to run "
    },
    "--help": {
      "#desc": "Print usage"
    },
    "-h|--hostname": {
      "#desc": "Container host name"
    },
    "--init": {
      "#desc": "Run an init inside the container that forwards signals and reaps processes"
    },
    "-i|--interactive": {
      "#desc": "Keep STDIN open even if not attached"
    },
    "--ip": {
      "#desc": "IPv4 address "
    },
    "--ip6": {
      "#desc": "IPv6 address "
    },
    "--ipc": {
      "#desc": "IPC mode to use"
    },
    "--isolation": {
      "#desc": "Container isolation technology"
    },
    "--kernel-memory": {
      "#desc": "Kernel memory limit"
    },
    "-l|--label": {
      "#desc": "Set meta data on a container"
    },
    "--label-file": {
      "#desc": "Read in a line delimited file of labels"
    },
    "--link": {
      "#desc": "Add link to another container"
    },
    "--link-local-ip": {
      "#desc": "Container IPv4/IPv6 link-local addresses"
    },
    "--log-driver": {
      "#desc": "Logging driver for the container"
    },
    "--log-opt": {
      "#desc": "Log driver options"
    },
    "--mac-address": {
      "#desc": "Container MAC address "
    },
    "-m|--memory": {
      "#desc": "Memory limit"
    },
    "--memory-reservation": {
      "#desc": "Memory soft limit"
    },
    "--memory-swap": {
      "#desc": "Swap limit equal to memory plus swap: '-1' to enable unlimited swap"
    },
    "--memory-swappiness": {
      "#desc": "Tune container memory swappiness "
    },
    "--mount": {
      "#desc": "Attach a filesystem mount to the container"
    },
    "--name": {
      "#desc": "Assign a name to the container"
    },
    "--network": {
      "#desc": "Connect a container to a network"
    },
    "--network-alias": {
      "#desc": "Add network-scoped alias for the container"
    },
    "--no-healthcheck": {
      "#desc": "Disable any container-specified HEALTHCHECK"
    },
    "--oom-kill-disable": {
      "#desc": "Disable OOM Killer"
    },
    "--oom-score-adj": {
      "#desc": "Tune host's OOM preferences "
    },
    "--pid": {
      "#desc": "PID namespace to use"
    },
    "--pids-limit": {
      "#desc": "Tune container pids limit "
    },
    "--platform": {
      "#desc": "Set platform if server is multi-platform capable"
    },
    "--privileged": {
      "#desc": "Give extended privileges to this container"
    },
    "-p|--publish": {
      "#desc": "Publish a container's port to the host"
    },
    "-P|--publish-all": {
      "#desc": "Publish all exposed ports to random ports"
    },
    "--pull": {
      "#desc": "Pull image before creating "
    },
    "--read-only": {
      "#desc": "Mount the container's root filesystem as read only"
    },
    "--restart": {
      "#desc": "Restart policy to apply when a container exits "
    },
    "--rm": {
      "#desc": "Automatically remove the container when it exits"
    },
    "--runtime": {
      "#desc": "Runtime to use for this container"
    },
    "--security-opt": {
      "#desc": "Security Options"
    },
    "--shm-size": {
      "#desc": "Size of /dev/shm"
    },
    "--stop-signal": {
      "#desc": "Signal to stop a container "
    },
    "--stop-timeout": {
      "#desc": "Timeout  to stop a container"
    },
    "--storage-opt": {
      "#desc": "Storage driver options for the container"
    },
    "--sysctl": {
      "#desc": "Sysctl options "
    },
    "--tmpfs": {
      "#desc": "Mount a tmpfs directory"
    },
    "-t|--tty": {
      "#desc": "Allocate a pseudo-TTY"
    },
    "--ulimit": {
      "#desc": "Ulimit options "
    },
    "-u|--user": {
      "#desc": "Username or UID "
    },
    "--userns": {
      "#desc": "User namespace to use"
    },
    "--uts": {
      "#desc": "UTS namespace to use"
    },
    "-v|--volume": {
      "#desc": "Bind mount a volume"
    },
    "--volume-driver": {
      "#desc": "Optional volume driver for the container"
    },
    "--volumes-from": {
      "#desc": "Mount volumes from the specified container"
    },
    "-w|--workdir": {
      "#desc": "Working directory inside the container"
    },
    "#desc": "Create a new container"
  },
  "diff": {
    "#desc": "Inspect changes to files or directories on a container's filesystem"
  },
  "events": {
    "-f|--filter": {
      "#desc": "Filter output based on conditions provided"
    },
    "--format": {
      "#desc": "Format the output using the given Go template"
    },
    "--since": {
      "#desc": "Show all events created since timestamp"
    },
    "--until": {
      "#desc": "Stream events until this timestamp"
    },
    "#desc": "Get real time events from the server"
  },
  "exec": {
    "-d|--detach": {
      "#desc": "Detached mode: run command in the background"
    },
    "--detach-keys": {
      "#desc": "Override the key sequence for detaching a container"
    },
    "-e|--env": {
      "#desc": "Set environment variables"
    },
    "--env-file": {
      "#desc": "Read in a file of environment variables"
    },
    "-i|--interactive": {
      "#desc": "Keep STDIN open even if not attached"
    },
    "--privileged": {
      "#desc": "Give extended privileges to the command"
    },
    "-t|--tty": {
      "#desc": "Allocate a pseudo-TTY"
    },
    "-u|--user": {
      "#desc": "Username or UID "
    },
    "-w|--workdir": {
      "#desc": "Working directory inside the container"
    },
    "#desc": "Run a command in a running container",
    "#1": {
      "#exec": "___x_cmd_advise_man__list docker"
    },
    "#2": {
      "#exec": "___x_cmd_advise_man__list"
    },
    "#n": {
      "#exec": "___x_cmd_advise__offset docker 1"
    }
  },
  "export": {
    "-o|--output": {
      "#desc": "Write to a file, instead of STDOUT"
    },
    "#desc": "Export a container's filesystem as a tar archive"
  },
  "history": {
    "--format": {
      "#desc": "Pretty-print images using a Go template"
    },
    "-H|--human": {
      "#desc": "Print sizes and dates in human readable format "
    },
    "--no-trunc": {
      "#desc": "Don't truncate output"
    },
    "-q|--quiet": {
      "#desc": "Only show image IDs"
    },
    "#desc": "Show the history of an image"
  },
  "images": {
    "-a|--all": {
      "#desc": "Show all images "
    },
    "--digests": {
      "#desc": "Show digests"
    },
    "-f|--filter": {
      "#desc": "Filter output based on conditions provided"
    },
    "--format": {
      "#desc": "Pretty-print images using a Go template"
    },
    "--no-trunc": {
      "#desc": "Don't truncate output"
    },
    "-q|--quiet": {
      "#desc": "Only show image IDs"
    },
    "#desc": "List images"
  },
  "import": {
    "-c|--change": {
      "#desc": "Apply Dockerfile instruction to the created image"
    },
    "-m|--message": {
      "#desc": "Set commit message for imported image"
    },
    "--platform": {
      "#desc": "Set platform if server is multi-platform capable"
    },
    "#desc": "Import the contents from a tarball to create a filesystem image"
  },
  "info": {
    "-f|--format": {
      "#desc": "Format the output using the given Go template"
    },
    "#desc": "Display system-wide information"
  },
  "inspect": {
    "-f|--format": {
      "#desc": "Format the output using the given Go template"
    },
    "-s|--size": {
      "#desc": "Display total file sizes if the type is container"
    },
    "--type": {
      "#desc": "Return JSON for specified type"
    },
    "#desc": "Return low-level information on Docker objects"
  },
  "kill": {
    "-s|--signal": {
      "#desc": "Signal to send to the container "
    },
    "#desc": "Kill one or more running containers"
  },
  "load": {
    "-i|--input": {
      "#desc": "Read from tar archive file, instead of STDIN"
    },
    "-q|--quiet": {
      "#desc": "Suppress the load output"
    },
    "#desc": "Load an image from a tar archive or STDIN"
  },
  "login": {
    "-h|--help": {
      "#desc": "Help for login"
    },
    "-p|--password": {
      "#desc": "string   password"
    },
    "--password-stdin": {
      "#desc": "Take the password from stdin"
    },
    "-u|--username": {
      "#desc": "string   username"
    },
    "#desc": "Log in to a Docker registry"
  },
  "logout": {
    "-h|--help": {
      "#desc": "Help for logout"
    },
    "#desc": "Log out from a Docker registry"
  },
  "logs": {
    "--details": {
      "#desc": "Show extra details provided to logs"
    },
    "-f|--follow": {
      "#desc": "Follow log output"
    },
    "--since": {
      "#desc": "Show logs since timestamp "
    },
    "-n|--tail": {
      "#desc": "Number of lines to show from the end of the logs "
    },
    "-t|--timestamps": {
      "#desc": "Show timestamps"
    },
    "--until": {
      "#desc": "Show logs before a timestamp "
    },
    "#desc": "Fetch the logs of a container"
  },
  "pause": {
    "#desc": "Pause all processes within one or more containers"
  },
  "port": {
    "#desc": "List port mappings or a specific mapping for the container"
  },
  "ps": {
    "-a|--all": {
      "#desc": "Show all containers "
    },
    "-f|--filter": {
      "#desc": "Filter output based on conditions provided"
    },
    "--format": {
      "#desc": "Pretty-print containers using a Go template"
    },
    "-n|--last": {
      "#desc": "Show n last created containers "
    },
    "-l|--latest": {
      "#desc": "Show the latest created container "
    },
    "--no-trunc": {
      "#desc": "Don't truncate output"
    },
    "-q|--quiet": {
      "#desc": "Only display container IDs"
    },
    "-s|--size": {
      "#desc": "Display total file sizes"
    },
    "#desc": "List containers"
  },
  "pull": {
    "-a|--all-tags": {
      "#desc": "Download all tagged images in the repository"
    },
    "--disable-content-trust": {
      "#desc": "Skip image verification "
    },
    "--platform": {
      "#desc": "Set platform if server is multi-platform capable"
    },
    "-q|--quiet": {
      "#desc": "Suppress verbose output"
    },
    "#desc": "Pull an image or a repository from a registry"
  },
  "push": {
    "-a|--all-tags": {
      "#desc": "Push all tagged images in the repository"
    },
    "--disable-content-trust": {
      "#desc": "Skip image signing "
    },
    "-q|--quiet": {
      "#desc": "Suppress verbose output"
    },
    "#desc": "Push an image or a repository to a registry"
  },
  "rename": {
    "#desc": "Rename a container"
  },
  "restart": {
    "-t|--time": {
      "#desc": "Seconds to wait for stop before killing the container "
    },
    "#desc": "Restart one or more containers"
  },
  "rm": {
    "-f|--force": {
      "#desc": "Force the removal of a running container "
    },
    "-l|--link": {
      "#desc": "Remove the specified link"
    },
    "-v|--volumes": {
      "#desc": "Remove anonymous volumes associated with the container"
    },
    "#desc": "Remove one or more containers"
  },
  "rmi": {
    "-f|--force": {
      "#desc": "Force removal of the image"
    },
    "--no-prune": {
      "#desc": "Do not delete untagged parents"
    },
    "#desc": "Remove one or more images"
  },
  "run": {
    "--add-host": {
      "#desc": "Add a custom host-to-IP mapping "
    },
    "-a|--attach": {
      "#desc": "Attach to STDIN, STDOUT or STDERR"
    },
    "--blkio-weight": {
      "#desc": "Block IO "
    },
    "--blkio-weight-device": {
      "#desc": "Block IO weight "
    },
    "--cap-add": {
      "#desc": "Add Linux capabilities"
    },
    "--cap-drop": {
      "#desc": "Drop Linux capabilities"
    },
    "--cgroup-parent": {
      "#desc": "Optional parent cgroup for the container"
    },
    "--cgroupns": {
      "#desc": "Cgroup namespace to use "
    },
    "--cidfile": {
      "#desc": "Write the container ID to the file"
    },
    "--cpu-period": {
      "#desc": "Limit CPU CFS  period"
    },
    "--cpu-quota": {
      "#desc": "Limit CPU CFS  quota"
    },
    "--cpu-rt-period": {
      "#desc": "Limit CPU real-time period in microseconds"
    },
    "--cpu-rt-runtime": {
      "#desc": "Limit CPU real-time runtime in microseconds"
    },
    "-c|--cpu-shares": {
      "#desc": "CPU shares "
    },
    "--cpus": {
      "#desc": "Number of CPUs"
    },
    "--cpuset-cpus": {
      "#desc": "CPUs in which to allow execution "
    },
    "--cpuset-mems": {
      "#desc": "MEMs in which to allow execution "
    },
    "-d|--detach": {
      "#desc": "Run container in background and print container ID"
    },
    "--detach-keys": {
      "#desc": "Override the key sequence for detaching a container"
    },
    "--device": {
      "#desc": "Add a host device to the container"
    },
    "--device-cgroup-rule": {
      "#desc": "Add a rule to the cgroup allowed devices list"
    },
    "--device-read-bps": {
      "#desc": "Limit read rate "
    },
    "--device-read-iops": {
      "#desc": "Limit read rate "
    },
    "--device-write-bps": {
      "#desc": "Limit write rate "
    },
    "--device-write-iops": {
      "#desc": "Limit write rate "
    },
    "--disable-content-trust": {
      "#desc": "Skip image verification "
    },
    "--dns": {
      "#desc": "Set custom DNS servers"
    },
    "--dns-option": {
      "#desc": "Set DNS options"
    },
    "--dns-search": {
      "#desc": "Set custom DNS search domains"
    },
    "--domainname": {
      "#desc": "Container NIS domain name"
    },
    "--entrypoint": {
      "#desc": "Overwrite the default ENTRYPOINT of the image"
    },
    "-e|--env": {
      "#desc": "Set environment variables"
    },
    "--env-file": {
      "#desc": "Read in a file of environment variables"
    },
    "--expose": {
      "#desc": "Expose a port or a range of ports"
    },
    "--gpus": {
      "#desc": "GPU devices to add to the container "
    },
    "--group-add": {
      "#desc": "Add additional groups to join"
    },
    "--health-cmd": {
      "#desc": "Command to run to check health"
    },
    "--health-interval": {
      "#desc": "Time between running the check "
    },
    "--health-retries": {
      "#desc": "Consecutive failures needed to report unhealthy"
    },
    "--health-start-period": {
      "#desc": "Start period for the container to initialize before starting health-retries countdown "
    },
    "--health-timeout": {
      "#desc": "Maximum time to allow one check to run "
    },
    "--help": {
      "#desc": "Print usage"
    },
    "-h|--hostname": {
      "#desc": "Container host name"
    },
    "--init": {
      "#desc": "Run an init inside the container that forwards signals and reaps processes"
    },
    "-i|--interactive": {
      "#desc": "Keep STDIN open even if not attached"
    },
    "--ip": {
      "#desc": "IPv4 address "
    },
    "--ip6": {
      "#desc": "IPv6 address "
    },
    "--ipc": {
      "#desc": "IPC mode to use"
    },
    "--isolation": {
      "#desc": "Container isolation technology"
    },
    "--kernel-memory": {
      "#desc": "Kernel memory limit"
    },
    "-l|--label": {
      "#desc": "Set meta data on a container"
    },
    "--label-file": {
      "#desc": "Read in a line delimited file of labels"
    },
    "--link": {
      "#desc": "Add link to another container"
    },
    "--link-local-ip": {
      "#desc": "Container IPv4/IPv6 link-local addresses"
    },
    "--log-driver": {
      "#desc": "Logging driver for the container"
    },
    "--log-opt": {
      "#desc": "Log driver options"
    },
    "--mac-address": {
      "#desc": "Container MAC address "
    },
    "-m|--memory": {
      "#desc": "Memory limit"
    },
    "--memory-reservation": {
      "#desc": "Memory soft limit"
    },
    "--memory-swap": {
      "#desc": "Swap limit equal to memory plus swap: '-1' to enable unlimited swap"
    },
    "--memory-swappiness": {
      "#desc": "Tune container memory swappiness "
    },
    "--mount": {
      "#desc": "Attach a filesystem mount to the container"
    },
    "--name": {
      "#desc": "Assign a name to the container"
    },
    "--network": {
      "#desc": "Connect a container to a network"
    },
    "--network-alias": {
      "#desc": "Add network-scoped alias for the container"
    },
    "--no-healthcheck": {
      "#desc": "Disable any container-specified HEALTHCHECK"
    },
    "--oom-kill-disable": {
      "#desc": "Disable OOM Killer"
    },
    "--oom-score-adj": {
      "#desc": "Tune host's OOM preferences "
    },
    "--pid": {
      "#desc": "PID namespace to use"
    },
    "--pids-limit": {
      "#desc": "Tune container pids limit "
    },
    "--platform": {
      "#desc": "Set platform if server is multi-platform capable"
    },
    "--privileged": {
      "#desc": "Give extended privileges to this container"
    },
    "-p|--publish": {
      "#desc": "Publish a container's port to the host"
    },
    "-P|--publish-all": {
      "#desc": "Publish all exposed ports to random ports"
    },
    "--pull": {
      "#desc": "Pull image before running "
    },
    "--read-only": {
      "#desc": "Mount the container's root filesystem as read only"
    },
    "--restart": {
      "#desc": "Restart policy to apply when a container exits "
    },
    "--rm": {
      "#desc": "Automatically remove the container when it exits"
    },
    "--runtime": {
      "#desc": "Runtime to use for this container"
    },
    "--security-opt": {
      "#desc": "Security Options"
    },
    "--shm-size": {
      "#desc": "Size of /dev/shm"
    },
    "--sig-proxy": {
      "#desc": "Proxy received signals to the process "
    },
    "--stop-signal": {
      "#desc": "Signal to stop a container "
    },
    "--stop-timeout": {
      "#desc": "Timeout  to stop a container"
    },
    "--storage-opt": {
      "#desc": "Storage driver options for the container"
    },
    "--sysctl": {
      "#desc": "Sysctl options "
    },
    "--tmpfs": {
      "#desc": "Mount a tmpfs directory"
    },
    "-t|--tty": {
      "#desc": "Allocate a pseudo-TTY"
    },
    "--ulimit": {
      "#desc": "Ulimit options "
    },
    "-u|--user": {
      "#desc": "Username or UID "
    },
    "--userns": {
      "#desc": "User namespace to use"
    },
    "--uts": {
      "#desc": "UTS namespace to use"
    },
    "-v|--volume": {
      "#desc": "Bind mount a volume"
    },
    "--volume-driver": {
      "#desc": "Optional volume driver for the container"
    },
    "--volumes-from": {
      "#desc": "Mount volumes from the specified container"
    },
    "-w|--workdir": {
      "#desc": "Working directory inside the container"
    },
    "#desc": "Run a command in a new container",
    "#1": {
      "#exec": "___x_cmd_advise_man__list docker"
    },
    "#2": {
      "#exec": "___x_cmd_advise_man__list"
    },
    "#n": {
      "#exec": "___x_cmd_advise__offset docker 1"
    }
  },
  "save": {
    "-o|--output": {
      "#desc": "Write to a file, instead of STDOUT"
    },
    "#desc": "Save one or more images to a tar archive "
  },
  "search": {
    "-f|--filter": {
      "#desc": "Filter output based on conditions provided"
    },
    "--format": {
      "#desc": "Pretty-print search using a Go template"
    },
    "--limit": {
      "#desc": "Max number of search results "
    },
    "--no-trunc": {
      "#desc": "Don't truncate output"
    },
    "#desc": "Search the Docker Hub for images"
  },
  "start": {
    "-a|--attach": {
      "#desc": "Attach STDOUT/STDERR and forward signals"
    },
    "--detach-keys": {
      "#desc": "Override the key sequence for detaching a container"
    },
    "-i|--interactive": {
      "#desc": "Attach container's STDIN"
    },
    "#desc": "Start one or more stopped containers"
  },
  "stats": {
    "-a|--all": {
      "#desc": "Show all containers "
    },
    "--format": {
      "#desc": "Pretty-print images using a Go template"
    },
    "--no-stream": {
      "#desc": "Disable streaming stats and only pull the first result"
    },
    "--no-trunc": {
      "#desc": "Do not truncate output"
    },
    "#desc": "Display a live stream of container resource usage statistics"
  },
  "stop": {
    "-t|--time": {
      "#desc": "Seconds to wait for stop before killing it "
    },
    "#desc": "Stop one or more running containers"
  },
  "tag": {
    "#desc": "Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE"
  },
  "top": {
    "#desc": "Display the running processes of a container"
  },
  "unpause": {
    "#desc": "Unpause all processes within one or more containers"
  },
  "update": {
    "--blkio-weight": {
      "#desc": "Block IO "
    },
    "--cpu-period": {
      "#desc": "Limit CPU CFS  period"
    },
    "--cpu-quota": {
      "#desc": "Limit CPU CFS  quota"
    },
    "--cpu-rt-period": {
      "#desc": "Limit the CPU real-time period in microseconds"
    },
    "--cpu-rt-runtime": {
      "#desc": "Limit the CPU real-time runtime in microseconds"
    },
    "-c|--cpu-shares": {
      "#desc": "CPU shares "
    },
    "--cpus": {
      "#desc": "Number of CPUs"
    },
    "--cpuset-cpus": {
      "#desc": "CPUs in which to allow execution "
    },
    "--cpuset-mems": {
      "#desc": "MEMs in which to allow execution "
    },
    "--kernel-memory": {
      "#desc": "Kernel memory limit"
    },
    "-m|--memory": {
      "#desc": "Memory limit"
    },
    "--memory-reservation": {
      "#desc": "Memory soft limit"
    },
    "--memory-swap": {
      "#desc": "Swap limit equal to memory plus swap: '-1' to enable unlimited swap"
    },
    "--pids-limit": {
      "#desc": "Tune container pids limit "
    },
    "--restart": {
      "#desc": "Restart policy to apply when a container exits"
    },
    "#desc": "Update configuration of one or more containers"
  },
  "version": {
    "-f|--format": {
      "#desc": "Format the output. Values: . "
    },
    "-h|--help": {
      "#desc": "Help for version"
    },
    "--kubeconfig": {
      "#desc": "Kubernetes config file"
    },
    "#desc": "Show the Docker version information"
  },
  "wait": {
    "#desc": "Block until one or more containers stop, then print their exit codes"
  }
}