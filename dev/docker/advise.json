{
    "--config": "Location of client config files (default " / home / zjq / .docker ")",
    "-c|--context": "Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with "
    docker context use ")",
    "-D|--debug": "Enable debug mode",
    "-H|--host": "Daemon socket(s) to connect to",
    "-l|--log-level": "Set the logging level ("
    debug "|"
    info "|"
    warn "|"
    error "|"
    fatal ") (default "
    info ")",
    "--tls": "Use TLS; implied by --tlsverify",
    "--tlscacert": "Trust certs signed only by this CA (default " / home / zjq / .docker / ca.pem ")",
    "--tlscert": "Path to TLS certificate file (default " / home / zjq / .docker / cert.pem ")",
    "--tlskey": "Path to TLS key file (default " / home / zjq / .docker / key.pem ")",
    "--tlsverify": "Use TLS and verify the remote",
    "-v|--version": "Print version information and quit",
    "builder": {
        "build": {
            "--add-host": "Add a custom host-to-IP mapping (host:ip)",
            "--build-arg": "Set build-time variables",
            "--cache-from": "Images to consider as cache sources",
            "--disable-content-trust": "Skip image verification (default true)",
            "-f|--file": "Name of the Dockerfile (Default is 'PATH/Dockerfile')",
            "--iidfile": "Write the image ID to the file",
            "--isolation": "Container isolation technology",
            "--label": "Set metadata for an image",
            "--network": "Set the networking mode for the RUN instructions during build (default "
            default ")",
            "--no-cache": "Do not use cache when building the image",
            "-o|--output": "Output destination (format: type=local,dest=path)",
            "--platform": "Set platform if server is multi-platform capable",
            "--progress": "Set type of progress output (auto, plain, tty). Use plain to show container output (default "
            auto ")",
            "--pull": "Always attempt to pull a newer version of the image",
            "-q|--quiet": "Suppress the build output and print image ID on success",
            "--secret": "Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret",
            "--ssh": "SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|",
            "-t|--tag": "Name and optionally a tag in the 'name:tag' format",
            "--target": "Set the target build stage to build.",
            "#desc": "Build an image from a Dockerfile"
        },
        "prune": {
            "-a|--all": "Remove all unused build cache, not just dangling ones",
            "--filter": "Provide filter values (e.g. 'until=24h')",
            "-f|--force": "Do not prompt for confirmation",
            "--keep-storage": "Amount of disk space to keep for cache",
            "#desc": "Remove build cache"
        },
        "#desc": "Manage builds"
    },
    "buildx": {
        "--builder": "Override the configured builder instance",
        "imagetools": {
            "--builder": "Override the configured builder instance",
            "create": {
                "--append": "Append to existing manifest",
                "--builder": "Override the configured builder instance",
                "--dry-run": "Show final image instead of pushing",
                "-f|--file": "Read source descriptor from file",
                "-t|--tag": "Set reference for new image",
                "#desc": "Create a new image based on source images"
            },
            "inspect": {
                "--builder": "Override the configured builder instance",
                "--raw": "Show original JSON manifest",
                "#desc": "Show details of image in the registry"
            },
            "#desc": "Commands to work on images in registry"
        },
        "bake": {
            "--builder": "Override the configured builder instance",
            "-f|--file": "Build definition file",
            "--load--set=*.output=type=docker": "Shorthand for --set=*.output=type=docker",
            "--metadata-file": "Write build result metadata to the file",
            "--no-cache": "Do not use cache when building the image",
            "--print": "Print the options without building",
            "--progress": "Set type of progress output (auto, `plain`, `tty`). Use plain to show container output (default "
            auto ")",
            "--pull": "Always attempt to pull a newer version of the image",
            "--push--set=*.output=type=registry": "Shorthand for --set=*.output=type=registry",
            "--set": "Override target value (e.g., targetpattern.key=value)",
            "#desc": "Build from a file"
        },
        "build": {
            "--add-host": "Add a custom host-to-IP mapping (format: host:ip)",
            "--allow": "Allow extra privileged entitlement (e.g., network.host, `security.insecure`)",
            "--build-arg": "Set build-time variables",
            "--builder": "Override the configured builder instance",
            "--cache-from": "External cache sources (e.g., user/app:cache, `type=local,src=path/to/dir`)",
            "--cache-to": "Cache export destinations (e.g., user/app:cache, `type=local,dest=path/to/dir`)",
            "--cgroup-parent": "Optional parent cgroup for the container",
            "-f|--file": "PATH/Dockerfile                        Name of the Dockerfile (default: PATH/Dockerfile)",
            "--iidfile": "Write the image ID to the file",
            "--label": "Set metadata for an image",
            "--load--output=type=docker": "Shorthand for --output=type=docker",
            "--metadata-file": "Write build result metadata to the file",
            "--network": "Set the networking mode for the RUN instructions during build (default "
            default ")",
            "--no-cache": "Do not use cache when building the image",
            "-o|--output": "Output destination (format: type=local,dest=path)",
            "--platform": "Set target platform for build",
            "--progress": "Set type of progress output (auto, `plain`, `tty`). Use plain to show container output (default "
            auto ")",
            "--pull": "Always attempt to pull a newer version of the image",
            "--push--output=type=registry": "Shorthand for --output=type=registry",
            "-q|--quiet": "Suppress the build output and print image ID on success",
            "--secret": "Secret file to expose to the build (format: id=mysecret,src=/local/secret)",
            "--shm-size": "Size of /dev/shm",
            "--ssh": "Size of /dev/shm",
            "-t|--tag": "Name and optionally a tag (format: name:tag)",
            "--target": "Set the target build stage to build.",
            "--ulimit": "Ulimit options (default [])",
            "#desc": "Start a build"
        },
        "create": {
            "--append": "Append a node to builder instead of changing it",
            "--bootstrap": "Boot builder after creation",
            "--buildkitd-flags": "Flags for buildkitd daemon",
            "--config": "BuildKit config file",
            "--driver": "Driver to use (available: docker, `docker-container`, `kubernetes`)",
            "--driver-opt": "Options for the driver",
            "--leave": "Remove a node from builder instead of changing it",
            "--name": "Builder instance name",
            "--node": "Create/modify node with given name",
            "--platform": "Fixed platforms for current node",
            "--use": "Set the current builder instance",
            "#desc": "Create a new builder instance"
        },
        "du": {
            "--builder": "Override the configured builder instance",
            "--filter": "Provide filter values",
            "--verbose": "Provide a more verbose output",
            "#desc": "Disk usage"
        },
        "inspect": {
            "--bootstrap": "Ensure builder has booted before inspecting",
            "--builder": "Override the configured builder instance",
            "#desc": "Inspect current builder instance"
        },
        "ls": {
            "#desc": "List builder instances"
        },
        "prune": {
            "-a|--all": "Remove all unused images, not just dangling ones",
            "--builder": "Override the configured builder instance",
            "--filter": "Provide filter values (e.g., until=24h)",
            "-f|--force": "Do not prompt for confirmation",
            "--keep-storage": "Amount of disk space to keep for cache",
            "--verbose": "Provide a more verbose output",
            "#desc": "Remove build cache"
        },
        "rm": {
            "--builder": "Override the configured builder instance",
            "--keep-state": "Keep BuildKit state",
            "#desc": "Remove a builder instance"
        },
        "stop": {
            "--builder": "Override the configured builder instance",
            "#desc": "Stop builder instance"
        },
        "use": {
            "--builder": "Override the configured builder instance",
            "--default": "Set builder as default for current context",
            "--global": "Builder persists context changes",
            "#desc": "Set the current builder instance"
        },
        "version": {
            "#desc": "Show buildx version information"
        },
        "#desc": "Docker Buildx (Docker Inc., v0.7.1)"
    },
    "compose": {
        "--ansi": "Control when to print ANSI control characters ("
        never "|"
        always "|"
        auto ") (default "
        auto ")",
        "--compatibility": "Run compose in backward compatibility mode",
        "--env-file": "Specify an alternate environment file.",
        "-f|--file": "Compose configuration files",
        "--profile": "Specify a profile to enable",
        "--project-directory": "Specify an alternate working directory",
        "-p|--project-name": "Project name",
        "build": {
            "--build-arg": "Set build-time variables for services.",
            "--no-cache": "Do not use cache when building the image",
            "--progress": "Set type of progress output (auto, tty, plain, quiet) (default "
            auto ")",
            "--pull": "Always attempt to pull a newer version of the image.",
            "-q|--quiet": "Don't print anything to STDOUT",
            "#desc": "Build or rebuild services"
        },
        "convert": {
            "--format": "Format the output. Values: [yaml | json] (default "
            yaml ")",
            "--hash": "Print the service config hash, one per line.",
            "--images": "Print the image names, one per line.",
            "--no-interpolate": "Don't interpolate environment variables.",
            "--no-normalize": "Don't normalize compose model.",
            "-o|--output": "Save to file (default to stdout)",
            "--profiles": "Print the profile names, one per line.",
            "-q|--quiet": "Only validate the configuration, don't print anything.",
            "--resolve-image-digests": "Pin image tags to digests.",
            "--services": "Print the service names, one per line.",
            "--volumes": "Print the volume names, one per line.",
            "#desc": "Converts the compose file to platform's canonical format"
        },
        "cp": {
            "--all": "Copy to all the containers of the service.",
            "-a|--archive": "Archive mode (copy all uid/gid information)",
            "-L|--follow-link": "Always follow symbol link in SRC_PATH",
            "--index": "Index of the container if there are multiple instances of a service [default: 1]. (default 1)",
            "#desc": "Copy files/folders between a service container and the local filesystem"
        },
        "create": {
            "--build": "Build images before starting containers.",
            "--force-recreate": "Recreate containers even if their configuration and image haven't changed.",
            "--no-build": "Don't build an image, even if it's missing.",
            "--no-recreate": "If containers already exist, don't recreate them. Incompatible with --force-recreate.",
            "#desc": "Creates containers for a service."
        },
        "down": {
            "--remove-orphans": "Remove containers for services not defined in the Compose file.",
            "--rmi": "Remove images used by services. "
            local " remove only images that don't have a custom tag ("
            local "|"
            all ")",
            "-t|--timeout": "Specify a shutdown timeout in seconds (default 10)",
            "-v|--volumes": "Remove named volumes declared in the volumes section of the Compose file and anonymous volumes attached to containers.",
            "#desc": "Stop and remove containers, networks"
        },
        "events": {
            "--json": "Output events as a stream of json objects",
            "#desc": "Receive real time events from containers."
        },
        "exec": {
            "-d|--detach": "Detached mode: Run command in the background.",
            "-e|--env": "Set environment variables",
            "--index": "Set environment variables",
            "-T|--no-TTY": "Disable pseudo-TTY allocation. By default docker compose exec allocates a TTY. (default true)",
            "--privileged": "Give extended privileges to the process.",
            "-u|--user": "Run the command as this user.",
            "-w|--workdir": "Path to workdir directory for this command.",
            "#desc": "Execute a command in a running container."
        },
        "images": {
            "-q|--quiet": "Only display IDs",
            "#desc": "List images used by the created containers"
        },
        "kill": {
            "-s|--signal": "SIGNAL to send to the container. (default "
            SIGKILL ")",
            "#desc": "Force stop service containers."
        },
        "logs": {
            "-f|--follow": "Follow log output.",
            "--no-color": "Produce monochrome output.",
            "--no-log-prefix": "Don't print prefix in logs.",
            "--since": "Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)",
            "--tail": "Number of lines to show from the end of the logs for each container. (default "
            all ")",
            "-t|--timestamps": "Show timestamps.",
            "--until": "Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)",
            "#desc": "View output from containers"
        },
        "ls": {
            "-a|--all": "Show all stopped Compose projects",
            "--filter": "Filter output based on conditions provided.",
            "--format": "Format the output. Values: [pretty | json]. (default "
            pretty ")",
            "-q|--quiet": "Only display IDs.",
            "#desc": "List running compose projects"
        },
        "pause": {
            "#desc": "Pause services"
        },
        "port": {
            "--index": "",
            "--protocol": "",
            "#desc": "Print the public port for a port binding."
        },
        "ps": {
            "-a|--all": "Show all stopped containers (including those created by the run command)",
            "--format": "Format the output. Values: [pretty | json] (default "
            pretty ")",
            "-q|--quiet": "Only display IDs",
            "--services": "Display services",
            "--status": "Filter services by status. Values: [paused | restarting | removing | running | dead | created | exited]",
            "#desc": "List containers"
        },
        "pull": {
            "--ignore-pull-failures": "Pull what it can and ignores images with pull failures",
            "--include-deps": "Also pull services declared as dependencies",
            "-q|--quiet": "Pull without printing progress information",
            "#desc": "Pull service images"
        },
        "push": {
            "--ignore-push-failures": "Push what it can and ignores images with push failures",
            "#desc": "Push service images"
        },
        "restart": {
            "-t|--timeout": "Specify a shutdown timeout in seconds (default 10)",
            "#desc": "Restart containers"
        },
        "rm": {
            "-f|--force": "Don't ask to confirm removal",
            "-s|--stop": "Stop the containers, if required, before removing",
            "-v|--volumes": "Remove any anonymous volumes attached to containers",
            "#desc": "Removes stopped service containers"
        },
        "run": {
            "-d|--detach": "Run container in background and print container ID",
            "--entrypoint": "Override the entrypoint of the image",
            "-e|--env": "Set environment variables",
            "-l|--label": "Add or override a label",
            "--name": "Assign a name to the container",
            "-T|--no-TTY": "Disable pseudo-noTty allocation. By default docker compose run allocates a TTY (default true)",
            "--no-deps": "Don't start linked services.",
            "-p|--publish": "Publish a container's port(s) to the host.",
            "--quiet-pull": "Pull without printing progress information.",
            "--rm": "Automatically remove the container when it exits",
            "--service-ports": "Run command with the service's ports enabled and mapped to the host.",
            "--use-aliases": "Use the service's network useAliases in the network(s) the container connects to.",
            "-u|--user": "Run as specified username or uid",
            "-v|--volume": "Bind mount a volume.",
            "-w|--workdir": "Working directory inside the container",
            "#desc": "Run a one-off command on a service."
        },
        "start": {
            "#desc": "Start services"
        },
        "stop": {
            "-t|--timeout": "Specify a shutdown timeout in seconds (default 10)",
            "#desc": "Stop services"
        },
        "top": {
            "#desc": "Display the running processes"
        },
        "unpause": {
            "#desc": "Unpause services"
        },
        "up": {
            "--abort-on-container-exit": "Stops all containers if any container was stopped. Incompatible with -d",
            "--always-recreate-deps": "Recreate dependent containers. Incompatible with --no-recreate.",
            "--attach": "Attach to service output.",
            "--attach-dependencies": "Attach to dependent containers.",
            "--build": "Build images before starting containers.",
            "-d|--detach": "Detached mode: Run containers in the background",
            "--exit-code-from": "Return the exit code of the selected service container. Implies --abort-on-container-exit",
            "--force-recreate": "Recreate containers even if their configuration and image haven't changed.",
            "--no-build": "Don't build an image, even if it's missing.",
            "--no-color": "Produce monochrome output.",
            "--no-deps": "Don't start linked services.",
            "--no-log-prefix": "Don't print prefix in logs.",
            "--no-recreate": "If containers already exist, don't recreate them. Incompatible with --force-recreate.",
            "--no-start": "Don't start the services after creating them.",
            "--quiet-pull": "Pull without printing progress information.",
            "--remove-orphans": "Remove containers for services not defined in the Compose file.",
            "-V|--renew-anon-volumes": "Recreate anonymous volumes instead of retrieving data from the previous containers.",
            "--scale": "Scale SERVICE to NUM instances. Overrides the scale setting in the Compose file if present.",
            "-t|--timeout": "Use this timeout in seconds for container shutdown when attached or when containers are already running. (default 10)",
            "--wait": "Wait for services to be running|healthy. Implies detached mode.",
            "#desc": "Create and start containers"
        },
        "version": {
            "-f|--format": "Format the output. Values: [pretty | json]. (Default: pretty)",
            "--short": "Shows only Compose's version number.",
            "#desc": "Show the Docker Compose version information"
        },
        "#desc": "Docker Compose (Docker Inc., v2.2.1)"
    },
    "config": {
        "create": {
            "-l|--label": "Config labels",
            "--template-driver": "Template driver",
            "#desc": "Create a config from a file or STDIN"
        },
        "inspect": {
            "-f|--format": "Format the output using the given Go template",
            "--pretty": "Print the information in a human friendly format",
            "#desc": "Display detailed information on one or more configs"
        },
        "ls": {
            "-f|--filter": "Filter output based on conditions provided",
            "--format": "Pretty-print configs using a Go template",
            "-q|--quiet": "Only display IDs",
            "#desc": "List configs"
        },
        "rm": {
            "#desc": "Remove one or more configs"
        },
        "#desc": "Manage Docker configs"
    },
    "container": {
        "attach": {
            "--detach-keys": "Override the key sequence for detaching a container",
            "--no-stdin": "Do not attach STDIN",
            "--sig-proxy": "Proxy all received signals to the process (default true)",
            "#desc": "Attach local standard input, output, and error streams to a running container"
        },
        "commit": {
            "-a|--author": "Author (e.g., "
            John Hannibal Smith < hannibal @a - team.com > ")",
            "-c|--change": "Apply Dockerfile instruction to the created image",
            "-m|--message": "Commit message",
            "-p|--pause": "Pause container during commit (default true)",
            "#desc": "Create a new image from a container's changes"
        },
        "cp": {
            "-a|--archive": "Archive mode (copy all uid/gid information)",
            "-L|--follow-link": "Always follow symbol link in SRC_PATH",
            "#desc": "Copy files/folders between a container and the local filesystem"
        },
        "create": {
            "--add-host": "Add a custom host-to-IP mapping (host:ip)",
            "-a|--attach": "Attach to STDIN, STDOUT or STDERR",
            "--blkio-weight": "Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)",
            "--blkio-weight-device": "Block IO weight (relative device weight) (default [])",
            "--cap-add": "Add Linux capabilities",
            "--cap-drop": "Drop Linux capabilities",
            "--cgroup-parent": "Optional parent cgroup for the container",
            "--cgroupns": "Cgroup namespace to use (host|private)",
            "--cidfile": "Write the container ID to the file",
            "--cpu-period": "Limit CPU CFS (Completely Fair Scheduler) period",
            "--cpu-quota": "Limit CPU CFS (Completely Fair Scheduler) quota",
            "--cpu-rt-period": "Limit CPU real-time period in microseconds",
            "--cpu-rt-runtime": "Limit CPU real-time runtime in microseconds",
            "-c|--cpu-shares": "CPU shares (relative weight)",
            "--cpus": "Number of CPUs",
            "--cpuset-cpus": "CPUs in which to allow execution (0-3, 0,1)",
            "--cpuset-mems": "MEMs in which to allow execution (0-3, 0,1)",
            "--device": "Add a host device to the container",
            "--device-cgroup-rule": "Add a rule to the cgroup allowed devices list",
            "--device-read-bps": "Limit read rate (bytes per second) from a device (default [])",
            "--device-read-iops": "Limit read rate (IO per second) from a device (default [])",
            "--device-write-bps": "Limit write rate (bytes per second) to a device (default [])",
            "--device-write-iops": "Limit write rate (IO per second) to a device (default [])",
            "--disable-content-trust": "Skip image verification (default true)",
            "--dns": "Set custom DNS servers",
            "--dns-option": "Set DNS options",
            "--dns-search": "Set custom DNS search domains",
            "--domainname": "Container NIS domain name",
            "--entrypoint": "Overwrite the default ENTRYPOINT of the image",
            "-e|--env": "Set environment variables",
            "--env-file": "Read in a file of environment variables",
            "--expose": "Expose a port or a range of ports",
            "--gpus": "GPU devices to add to the container ('all' to pass all GPUs)",
            "--group-add": "Add additional groups to join",
            "--health-cmd": "Command to run to check health",
            "--health-interval": "Time between running the check (ms|s|m|h) (default 0s)",
            "--health-retries": "Consecutive failures needed to report unhealthy",
            "--health-start-period": "Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)",
            "--health-timeout": "Maximum time to allow one check to run (ms|s|m|h) (default 0s)",
            "--help": "Print usage",
            "-h|--hostname": "Container host name",
            "--init": "Run an init inside the container that forwards signals and reaps processes",
            "-i|--interactive": "Keep STDIN open even if not attached",
            "--ip": "IPv4 address (e.g., 172.30.100.104)",
            "--ip6": "IPv6 address (e.g., 2001:db8::33)",
            "--ipc": "IPC mode to use",
            "--isolation": "Container isolation technology",
            "--kernel-memory": "Kernel memory limit",
            "-l|--label": "Set meta data on a container",
            "--label-file": "Read in a line delimited file of labels",
            "--link": "Add link to another container",
            "--link-local-ip": "Container IPv4/IPv6 link-local addresses",
            "--log-driver": "Logging driver for the container",
            "--log-opt": "Log driver options",
            "--mac-address": "Container MAC address (e.g., 92:d0:c6:0a:29:33)",
            "-m|--memory": "Memory limit",
            "--memory-reservation": "Memory soft limit",
            "--memory-swap": "Swap limit equal to memory plus swap: '-1' to enable unlimited swap",
            "--memory-swappiness": "Tune container memory swappiness (0 to 100) (default -1)",
            "--mount": "Attach a filesystem mount to the container",
            "--name": "Assign a name to the container",
            "--network": "Connect a container to a network",
            "--network-alias": "Add network-scoped alias for the container",
            "--no-healthcheck": "Disable any container-specified HEALTHCHECK",
            "--oom-kill-disable": "Disable OOM Killer",
            "--oom-score-adj": "Tune host's OOM preferences (-1000 to 1000)",
            "--pid": "PID namespace to use",
            "--pids-limit": "Tune container pids limit (set -1 for unlimited)",
            "--platform": "Set platform if server is multi-platform capable",
            "--privileged": "Give extended privileges to this container",
            "-p|--publish": "Publish a container's port(s) to the host",
            "-P|--publish-all": "Publish all exposed ports to random ports",
            "--pull": "Pull image before creating ("
            always "|"
            missing "|"
            never ") (default "
            missing ")",
            "--read-only": "Mount the container's root filesystem as read only",
            "--restart": "Restart policy to apply when a container exits (default "
            no ")",
            "--rm": "Automatically remove the container when it exits",
            "--runtime": "Runtime to use for this container",
            "--security-opt": "Security Options",
            "--shm-size": "Size of /dev/shm",
            "--stop-signal": "Signal to stop a container (default "
            SIGTERM ")",
            "--stop-timeout": "Timeout (in seconds) to stop a container",
            "--storage-opt": "Storage driver options for the container",
            "--sysctl": "Sysctl options (default map[])",
            "--tmpfs": "Mount a tmpfs directory",
            "-t|--tty": "Allocate a pseudo-TTY",
            "--ulimit": "Ulimit options (default [])",
            "-u|--user": "Username or UID (format: group|gid>])",
            "--userns": "User namespace to use",
            "--uts": "UTS namespace to use",
            "-v|--volume": "Bind mount a volume",
            "--volume-driver": "Optional volume driver for the container",
            "--volumes-from": "Mount volumes from the specified container(s)",
            "-w|--workdir": "Working directory inside the container",
            "#desc": "Create a new container"
        },
        "diff": {
            "#desc": "Inspect changes to files or directories on a container's filesystem"
        },
        "exec": {
            "-d|--detach": "Detached mode: run command in the background",
            "--detach-keys": "Override the key sequence for detaching a container",
            "-e|--env": "Set environment variables",
            "--env-file": "Read in a file of environment variables",
            "-i|--interactive": "Keep STDIN open even if not attached",
            "--privileged": "Give extended privileges to the command",
            "-t|--tty": "Allocate a pseudo-TTY",
            "-u|--user": "Username or UID (format: group|gid>])",
            "-w|--workdir": "Working directory inside the container",
            "#desc": "Run a command in a running container"
        },
        "export": {
            "-o|--output": "Write to a file, instead of STDOUT",
            "#desc": "Export a container's filesystem as a tar archive"
        },
        "inspect": {
            "-f|--format": "Format the output using the given Go template",
            "-s|--size": "Display total file sizes",
            "#desc": "Display detailed information on one or more containers"
        },
        "kill": {
            "-s|--signal": "Signal to send to the container (default "
            KILL ")",
            "#desc": "Kill one or more running containers"
        },
        "logs": {
            "--details": "Show extra details provided to logs",
            "-f|--follow": "Follow log output",
            "--since": "Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)",
            "-n|--tail": "Number of lines to show from the end of the logs (default "
            all ")",
            "-t|--timestamps": "Show timestamps",
            "--until": "Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)",
            "#desc": "Fetch the logs of a container"
        },
        "ls": {
            "-a|--all": "Show all containers (default shows just running)",
            "-f|--filter": "Filter output based on conditions provided",
            "--format": "Pretty-print containers using a Go template",
            "-n|--last": "Show n last created containers (includes all states) (default -1)",
            "-l|--latest": "Show the latest created container (includes all states)",
            "--no-trunc": "Don't truncate output",
            "-q|--quiet": "Only display container IDs",
            "-s|--size": "Display total file sizes",
            "#desc": "List containers"
        },
        "pause": {
            "#desc": "Pause all processes within one or more containers"
        },
        "port": {
            "#desc": "List port mappings or a specific mapping for the container"
        },
        "prune": {
            "--filter": "Provide filter values (e.g. 'until=<timestamp>')",
            "-f|--force": "Do not prompt for confirmation",
            "#desc": "Remove all stopped containers"
        },
        "rename": {
            "#desc": "Rename a container"
        },
        "restart": {
            "-t|--time": "Seconds to wait for stop before killing the container (default 10)",
            "#desc": "Restart one or more containers"
        },
        "rm": {
            "-f|--force": "Force the removal of a running container (uses SIGKILL)",
            "-l|--link": "Remove the specified link",
            "-v|--volumes": "Remove anonymous volumes associated with the container",
            "#desc": "Remove one or more containers"
        },
        "run": {
            "--add-host": "Add a custom host-to-IP mapping (host:ip)",
            "-a|--attach": "Attach to STDIN, STDOUT or STDERR",
            "--blkio-weight": "Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)",
            "--blkio-weight-device": "Block IO weight (relative device weight) (default [])",
            "--cap-add": "Add Linux capabilities",
            "--cap-drop": "Drop Linux capabilities",
            "--cgroup-parent": "Optional parent cgroup for the container",
            "--cgroupns": "Cgroup namespace to use (host|private)",
            "--cidfile": "Write the container ID to the file",
            "--cpu-period": "Limit CPU CFS (Completely Fair Scheduler) period",
            "--cpu-quota": "Limit CPU CFS (Completely Fair Scheduler) quota",
            "--cpu-rt-period": "Limit CPU real-time period in microseconds",
            "--cpu-rt-runtime": "Limit CPU real-time runtime in microseconds",
            "-c|--cpu-shares": "CPU shares (relative weight)",
            "--cpus": "Number of CPUs",
            "--cpuset-cpus": "CPUs in which to allow execution (0-3, 0,1)",
            "--cpuset-mems": "MEMs in which to allow execution (0-3, 0,1)",
            "-d|--detach": "Run container in background and print container ID",
            "--detach-keys": "Override the key sequence for detaching a container",
            "--device": "Add a host device to the container",
            "--device-cgroup-rule": "Add a rule to the cgroup allowed devices list",
            "--device-read-bps": "Limit read rate (bytes per second) from a device (default [])",
            "--device-read-iops": "Limit read rate (IO per second) from a device (default [])",
            "--device-write-bps": "Limit write rate (bytes per second) to a device (default [])",
            "--device-write-iops": "Limit write rate (IO per second) to a device (default [])",
            "--disable-content-trust": "Skip image verification (default true)",
            "--dns": "Set custom DNS servers",
            "--dns-option": "Set DNS options",
            "--dns-search": "Set custom DNS search domains",
            "--domainname": "Container NIS domain name",
            "--entrypoint": "Overwrite the default ENTRYPOINT of the image",
            "-e|--env": "Set environment variables",
            "--env-file": "Read in a file of environment variables",
            "--expose": "Expose a port or a range of ports",
            "--gpus": "GPU devices to add to the container ('all' to pass all GPUs)",
            "--group-add": "Add additional groups to join",
            "--health-cmd": "Command to run to check health",
            "--health-interval": "Time between running the check (ms|s|m|h) (default 0s)",
            "--health-retries": "Consecutive failures needed to report unhealthy",
            "--health-start-period": "Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)",
            "--health-timeout": "Maximum time to allow one check to run (ms|s|m|h) (default 0s)",
            "--help": "Print usage",
            "-h|--hostname": "Container host name",
            "--init": "Run an init inside the container that forwards signals and reaps processes",
            "-i|--interactive": "Keep STDIN open even if not attached",
            "--ip": "IPv4 address (e.g., 172.30.100.104)",
            "--ip6": "IPv6 address (e.g., 2001:db8::33)",
            "--ipc": "IPC mode to use",
            "--isolation": "Container isolation technology",
            "--kernel-memory": "Kernel memory limit",
            "-l|--label": "Set meta data on a container",
            "--label-file": "Read in a line delimited file of labels",
            "--link": "Add link to another container",
            "--link-local-ip": "Container IPv4/IPv6 link-local addresses",
            "--log-driver": "Logging driver for the container",
            "--log-opt": "Log driver options",
            "--mac-address": "Container MAC address (e.g., 92:d0:c6:0a:29:33)",
            "-m|--memory": "Memory limit",
            "--memory-reservation": "Memory soft limit",
            "--memory-swap": "Swap limit equal to memory plus swap: '-1' to enable unlimited swap",
            "--memory-swappiness": "Tune container memory swappiness (0 to 100) (default -1)",
            "--mount": "Attach a filesystem mount to the container",
            "--name": "Assign a name to the container",
            "--network": "Connect a container to a network",
            "--network-alias": "Add network-scoped alias for the container",
            "--no-healthcheck": "Disable any container-specified HEALTHCHECK",
            "--oom-kill-disable": "Disable OOM Killer",
            "--oom-score-adj": "Tune host's OOM preferences (-1000 to 1000)",
            "--pid": "PID namespace to use",
            "--pids-limit": "Tune container pids limit (set -1 for unlimited)",
            "--platform": "Set platform if server is multi-platform capable",
            "--privileged": "Give extended privileges to this container",
            "-p|--publish": "Publish a container's port(s) to the host",
            "-P|--publish-all": "Publish all exposed ports to random ports",
            "--pull": "Pull image before running ("
            always "|"
            missing "|"
            never ") (default "
            missing ")",
            "--read-only": "Mount the container's root filesystem as read only",
            "--restart": "Restart policy to apply when a container exits (default "
            no ")",
            "--rm": "Automatically remove the container when it exits",
            "--runtime": "Runtime to use for this container",
            "--security-opt": "Security Options",
            "--shm-size": "Size of /dev/shm",
            "--sig-proxy": "Proxy received signals to the process (default true)",
            "--stop-signal": "Signal to stop a container (default "
            SIGTERM ")",
            "--stop-timeout": "Timeout (in seconds) to stop a container",
            "--storage-opt": "Storage driver options for the container",
            "--sysctl": "Sysctl options (default map[])",
            "--tmpfs": "Mount a tmpfs directory",
            "-t|--tty": "Allocate a pseudo-TTY",
            "--ulimit": "Ulimit options (default [])",
            "-u|--user": "Username or UID (format: group|gid>])",
            "--userns": "User namespace to use",
            "--uts": "UTS namespace to use",
            "-v|--volume": "Bind mount a volume",
            "--volume-driver": "Optional volume driver for the container",
            "--volumes-from": "Mount volumes from the specified container(s)",
            "-w|--workdir": "Working directory inside the container",
            "#desc": "Run a command in a new container"
        },
        "start": {
            "-a|--attach": "Attach STDOUT/STDERR and forward signals",
            "--detach-keys": "Override the key sequence for detaching a container",
            "-i|--interactive": "Attach container's STDIN",
            "#desc": "Start one or more stopped containers"
        },
        "stats": {
            "-a|--all": "Show all containers (default shows just running)",
            "--format": "Pretty-print images using a Go template",
            "--no-stream": "Disable streaming stats and only pull the first result",
            "--no-trunc": "Do not truncate output",
            "#desc": "Display a live stream of container(s) resource usage statistics"
        },
        "stop": {
            "-t|--time": "Seconds to wait for stop before killing it (default 10)",
            "#desc": "Stop one or more running containers"
        },
        "top": {
            "#desc": "Display the running processes of a container"
        },
        "unpause": {
            "#desc": "Unpause all processes within one or more containers"
        },
        "update": {
            "--blkio-weight": "Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)",
            "--cpu-period": "Limit CPU CFS (Completely Fair Scheduler) period",
            "--cpu-quota": "Limit CPU CFS (Completely Fair Scheduler) quota",
            "--cpu-rt-period": "Limit the CPU real-time period in microseconds",
            "--cpu-rt-runtime": "Limit the CPU real-time runtime in microseconds",
            "-c|--cpu-shares": "CPU shares (relative weight)",
            "--cpus": "Number of CPUs",
            "--cpuset-cpus": "CPUs in which to allow execution (0-3, 0,1)",
            "--cpuset-mems": "MEMs in which to allow execution (0-3, 0,1)",
            "--kernel-memory": "Kernel memory limit",
            "-m|--memory": "Memory limit",
            "--memory-reservation": "Memory soft limit",
            "--memory-swap": "Swap limit equal to memory plus swap: '-1' to enable unlimited swap",
            "--pids-limit": "Tune container pids limit (set -1 for unlimited)",
            "--restart": "Restart policy to apply when a container exits",
            "#desc": "Update configuration of one or more containers"
        },
        "wait": {
            "#desc": "Block until one or more containers stop, then print their exit codes"
        },
        "#desc": "Manage containers"
    },
    "context": {
        "create": {
            "aci": {
                "--description": "Description of the context",
                "-h|--help": "Help for aci",
                "--location": "Location",
                "--resource-group": "Resource group",
                "--subscription-id": "Subscription id",
                "#desc": "Create a context for Azure Container Instances"
            },
            "ecs": {
                "--access-keys": "Use AWS access keys from file",
                "--description": "Description of the context",
                "--from-env": "Use AWS environment variables for profile, or credentials and region",
                "-h|--help": "Help for ecs",
                "--local-simulation": "Create context for ECS local simulation endpoints",
                "--profile": "Use an existing AWS profile",
                "#desc": "Create a context for Amazon ECS"
            },
            "--default-stack-orchestrator": "Default orchestrator for stack operations to use with this context (swarm|kubernetes|all)",
            "--description": "Description of the context",
            "--docker": "Set the docker endpoint (default [])",
            "--from": "Create context from a named context",
            "-h|--help": "Help for create",
            "--kubernetes": "Set the kubernetes endpoint (default [])",
            "#desc": "Create new context"
        },
        "export": {
            "-h|--help": "Help for export",
            "--kubeconfig": "Export as a kubeconfig file",
            "#desc": "Export a context to a tar or kubeconfig file"
        },
        "import": {
            "-h|--help": "Help for import",
            "#desc": "Import a context from a tar or zip file"
        },
        "inspect": {
            "-f|--format": "Format the output using the given Go template",
            "-h|--help": "Help for inspect",
            "#desc": "Display detailed information on one or more contexts"
        },
        "list": {
            "--format": "Format the output. Values: [pretty | json]. (Default: pretty)",
            "-h|--help": "Help for list",
            "-q|--quiet": "Only show context names",
            "#desc": "List available contexts"
        },
        "rm": {
            "-f|--force": "Force removing current context",
            "-h|--help": "Help for rm",
            "#desc": "Remove one or more contexts"
        },
        "show": {
            "-h|--help": "Help for show",
            "#desc": "Print the current context"
        },
        "update": {
            "--default-stack-orchestrator": "Default orchestrator for stack operations to use with this context (swarm|kubernetes|all)",
            "--description": "Description of the context",
            "--docker": "Set the docker endpoint (default [])",
            "-h|--help": "Help for update",
            "--kubernetes": "Set the kubernetes endpoint (default [])",
            "#desc": "Update a context"
        },
        "use": {
            "-h|--help": "Help for use",
            "#desc": "Set the default context"
        },
        "-h|--help": "Help for context",
        "#desc": "Manage contexts"
    },
    "image": {
        "build": {
            "--add-host": "Add a custom host-to-IP mapping (host:ip)",
            "--build-arg": "Set build-time variables",
            "--cache-from": "Images to consider as cache sources",
            "--disable-content-trust": "Skip image verification (default true)",
            "-f|--file": "Name of the Dockerfile (Default is 'PATH/Dockerfile')",
            "--iidfile": "Write the image ID to the file",
            "--isolation": "Container isolation technology",
            "--label": "Set metadata for an image",
            "--network": "Set the networking mode for the RUN instructions during build (default "
            default ")",
            "--no-cache": "Do not use cache when building the image",
            "-o|--output": "Output destination (format: type=local,dest=path)",
            "--platform": "Set platform if server is multi-platform capable",
            "--progress": "Set type of progress output (auto, plain, tty). Use plain to show container output (default "
            auto ")",
            "--pull": "Always attempt to pull a newer version of the image",
            "-q|--quiet": "Suppress the build output and print image ID on success",
            "--secret": "Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret",
            "--ssh": "SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|",
            "-t|--tag": "Name and optionally a tag in the 'name:tag' format",
            "--target": "Set the target build stage to build.",
            "#desc": "Build an image from a Dockerfile"
        },
        "history": {
            "--format": "Pretty-print images using a Go template",
            "-H|--human": "Print sizes and dates in human readable format (default true)",
            "--no-trunc": "Don't truncate output",
            "-q|--quiet": "Only show image IDs",
            "#desc": "Show the history of an image"
        },
        "import": {
            "-c|--change": "Apply Dockerfile instruction to the created image",
            "-m|--message": "Set commit message for imported image",
            "--platform": "Set platform if server is multi-platform capable",
            "#desc": "Import the contents from a tarball to create a filesystem image"
        },
        "inspect": {
            "-f|--format": "Format the output using the given Go template",
            "#desc": "Display detailed information on one or more images"
        },
        "load": {
            "-i|--input": "Read from tar archive file, instead of STDIN",
            "-q|--quiet": "Suppress the load output",
            "#desc": "Load an image from a tar archive or STDIN"
        },
        "ls": {
            "-a|--all": "Show all images (default hides intermediate images)",
            "--digests": "Show digests",
            "-f|--filter": "Filter output based on conditions provided",
            "--format": "Pretty-print images using a Go template",
            "--no-trunc": "Don't truncate output",
            "-q|--quiet": "Only show image IDs",
            "#desc": "List images"
        },
        "prune": {
            "-a|--all": "Remove all unused images, not just dangling ones",
            "--filter": "Provide filter values (e.g. 'until=<timestamp>')",
            "-f|--force": "Do not prompt for confirmation",
            "#desc": "Remove unused images"
        },
        "pull": {
            "-a|--all-tags": "Download all tagged images in the repository",
            "--disable-content-trust": "Skip image verification (default true)",
            "--platform": "Set platform if server is multi-platform capable",
            "-q|--quiet": "Suppress verbose output",
            "#desc": "Pull an image or a repository from a registry"
        },
        "push": {
            "-a|--all-tags": "Push all tagged images in the repository",
            "--disable-content-trust": "Skip image signing (default true)",
            "-q|--quiet": "Suppress verbose output",
            "#desc": "Push an image or a repository to a registry"
        },
        "rm": {
            "-f|--force": "Force removal of the image",
            "--no-prune": "Do not delete untagged parents",
            "#desc": "Remove one or more images"
        },
        "save": {
            "-o|--output": "Write to a file, instead of STDOUT",
            "#desc": "Save one or more images to a tar archive (streamed to STDOUT by default)"
        },
        "tag": {
            "#desc": "Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE"
        },
        "#desc": "Manage images"
    },
    "manifest": {
        "annotate": {
            "--arch": "Set architecture",
            "--os": "Set operating system",
            "--os-features": "Set operating system feature",
            "--os-version": "Set operating system version",
            "--variant": "Set architecture variant",
            "#desc": "Add additional information to a local image manifest"
        },
        "create": {
            "-a|--amend": "Amend an existing manifest list",
            "--insecure": "Allow communication with an insecure registry",
            "#desc": "Create a local manifest list for annotating and pushing to a registry"
        },
        "inspect": {
            "--insecure": "Allow communication with an insecure registry",
            "-v|--verbose": "Output additional info including layers and platform",
            "#desc": "Display an image manifest, or manifest list"
        },
        "push": {
            "--insecure": "Allow push to an insecure registry",
            "-p|--purge": "Remove the local manifest list after push",
            "#desc": "Push a manifest list to a repository"
        },
        "rm": {
            "#desc": "Delete one or more manifest lists from local storage"
        },
        "#desc": "Manage Docker image manifests and manifest lists"
    },
    "network": {
        "connect": {
            "--alias": "Add network-scoped alias for the container",
            "--driver-opt": "Add network-scoped alias for the container",
            "--ip": "IPv4 address (e.g., 172.30.100.104)",
            "--ip6": "IPv6 address (e.g., 2001:db8::33)",
            "--link": "Add link to another container",
            "--link-local-ip": "Add a link-local address for the container",
            "#desc": "Connect a container to a network"
        },
        "create": {
            "--attachable": "Enable manual container attachment",
            "--aux-address": "Auxiliary IPv4 or IPv6 addresses used by Network driver (default map[])",
            "--config-from": "The network from which to copy the configuration",
            "--config-only": "Create a configuration only network",
            "-d|--driver": "Driver to manage the Network (default "
            bridge ")",
            "--gateway": "IPv4 or IPv6 Gateway for the master subnet",
            "--ingress": "Create swarm routing-mesh network",
            "--internal": "Restrict external access to the network",
            "--ip-range": "Allocate container ip from a sub-range",
            "--ipam-driver": "IP Address Management Driver (default "
            default ")",
            "--ipam-opt": "Set IPAM driver specific options (default map[])",
            "--ipv6": "Enable IPv6 networking",
            "--label": "Set metadata on a network",
            "-o|--opt": "Set driver specific options (default map[])",
            "--scope": "Control the network's scope",
            "--subnet": "Subnet in CIDR format that represents a network segment",
            "#desc": "Create a network"
        },
        "disconnect": {
            "-f|--force": "Force the container to disconnect from a network",
            "#desc": "Disconnect a container from a network"
        },
        "inspect": {
            "-f|--format": "Format the output using the given Go template",
            "-v|--verbose": "Verbose output for diagnostics",
            "#desc": "Display detailed information on one or more networks"
        },
        "ls": {
            "-f|--filter": "Provide filter values (e.g. 'driver=bridge')",
            "--format": "Pretty-print networks using a Go template",
            "--no-trunc": "Do not truncate the output",
            "-q|--quiet": "Only display network IDs",
            "#desc": "List networks"
        },
        "prune": {
            "--filter": "Provide filter values (e.g. 'until=<timestamp>')",
            "-f|--force": "Do not prompt for confirmation",
            "#desc": "Remove all unused networks"
        },
        "rm": {
            "#desc": "Remove one or more networks"
        },
        "#desc": "Manage networks"
    },
    "node": {
        "demote": {
            "#desc": "Demote one or more nodes from manager in the swarm"
        },
        "inspect": {
            "-f|--format": "Format the output using the given Go template",
            "--pretty": "Print the information in a human friendly format",
            "#desc": "Display detailed information on one or more nodes"
        },
        "ls": {
            "-f|--filter": "Filter output based on conditions provided",
            "--format": "Pretty-print nodes using a Go template",
            "-q|--quiet": "Only display IDs",
            "#desc": "List nodes in the swarm"
        },
        "promote": {
            "#desc": "Promote one or more nodes to manager in the swarm"
        },
        "ps": {
            "-f|--filter": "Filter output based on conditions provided",
            "--format": "Pretty-print tasks using a Go template",
            "--no-resolve": "Do not map IDs to Names",
            "--no-trunc": "Do not truncate output",
            "-q|--quiet": "Only display task IDs",
            "#desc": "List tasks running on one or more nodes, defaults to current node"
        },
        "rm": {
            "-f|--force": "Force remove a node from the swarm",
            "#desc": "Remove one or more nodes from the swarm"
        },
        "update": {
            "--availability": "Availability of the node ("
            active "|"
            pause "|"
            drain ")",
            "--label-add": "Add or update a node label (key=value)",
            "--label-rm": "Remove a node label if exists",
            "--role": "Role of the node ("
            worker "|"
            manager ")",
            "#desc": "Update a node"
        },
        "#desc": "Manage Swarm nodes"
    },
    "plugin": {
        "create": {
            "--compress": "Compress the context using gzip",
            "#desc": "Create a plugin from a rootfs and configuration. Plugin data directory must contain config.json and rootfs directory."
        },
        "disable": {
            "-f|--force": "Force the disable of an active plugin",
            "#desc": "Disable a plugin"
        },
        "enable": {
            "--timeout": "HTTP client timeout (in seconds) (default 30)",
            "#desc": "Enable a plugin"
        },
        "inspect": {
            "-f|--format": "Format the output using the given Go template",
            "#desc": "Display detailed information on one or more plugins"
        },
        "install": {
            "--alias": "Local name for plugin",
            "--disable": "Do not enable the plugin on install",
            "--disable-content-trust": "Skip image verification (default true)",
            "--grant-all-permissions": "Grant all permissions necessary to run the plugin",
            "#desc": "Install a plugin"
        },
        "ls": {
            "-f|--filter": "Provide filter values (e.g. 'enabled=true')",
            "--format": "Pretty-print plugins using a Go template",
            "--no-trunc": "Don't truncate output",
            "-q|--quiet": "Only display plugin IDs",
            "#desc": "List plugins"
        },
        "push": {
            "--disable-content-trust": "Skip image signing (default true)",
            "#desc": "Push a plugin to a registry"
        },
        "rm": {
            "-f|--force": "Force the removal of an active plugin",
            "#desc": "Remove one or more plugins"
        },
        "set": {
            "#desc": "Change settings for a plugin"
        },
        "upgrade": {
            "--disable-content-trust": "Skip image verification (default true)",
            "--grant-all-permissions": "Grant all permissions necessary to run the plugin",
            "--skip-remote-check": "Do not check if specified remote plugin matches existing plugin image",
            "#desc": "Upgrade an existing plugin"
        },
        "#desc": "Manage plugins"
    },
    "scan": {
        "--accept-license": "Accept using a third party scanning provider",
        "--dependency-tree": "Show dependency tree with scan results",
        "--exclude-base": "Exclude base image from vulnerability scanning (requires --file)",
        "-f|--file": "Dockerfile associated with image, provides more detailed results",
        "--group-issues": "Aggregate duplicated vulnerabilities and group them to a single one (requires --json)",
        "--json": "Output results in JSON format",
        "--login": "Authenticate to the scan provider using an optional token (with --token), or web base token if empty",
        "--reject-license": "Reject using a third party scanning provider",
        "--severity": "Only report vulnerabilities of provided level or higher (low|medium|high)",
        "--token": "Authentication token to login to the third party scanning provider",
        "--version": "Display version of the scan plugin",
        "#desc": "Docker Scan (Docker Inc., v0.11.0)"
    },
    "secret": {
        "create": {
            "-d|--driver": "Secret driver",
            "-l|--label": "Secret labels",
            "--template-driver": "Template driver",
            "#desc": "Create a secret from a file or STDIN as content"
        },
        "inspect": {
            "-f|--format": "Format the output using the given Go template",
            "--pretty": "Print the information in a human friendly format",
            "#desc": "Display detailed information on one or more secrets"
        },
        "ls": {
            "-f|--filter": "Filter output based on conditions provided",
            "--format": "Pretty-print secrets using a Go template",
            "-q|--quiet": "Only display IDs",
            "#desc": "List secrets"
        },
        "rm": {
            "#desc": "Remove one or more secrets"
        },
        "#desc": "Manage Docker secrets"
    },
    "service": {
        "create": {
            "--cap-add": "Add Linux capabilities",
            "--cap-drop": "Drop Linux capabilities",
            "--config": "Specify configurations to expose to the service",
            "--constraint": "Placement constraints",
            "--container-label": "Container labels",
            "--credential-spec": "Credential spec for managed service account (Windows only)",
            "-d|--detach": "Exit immediately instead of waiting for the service to converge",
            "--dns": "Set custom DNS servers",
            "--dns-option": "Set DNS options",
            "--dns-search": "Set custom DNS search domains",
            "--endpoint-mode": "Endpoint mode (vip or dnsrr) (default "
            vip ")",
            "--entrypoint": "Overwrite the default ENTRYPOINT of the image",
            "-e|--env": "Set environment variables",
            "--env-file": "Read in a file of environment variables",
            "--generic-resource": "User defined resources",
            "--group": "Set one or more supplementary user groups for the container",
            "--health-cmd": "Command to run to check health",
            "--health-interval": "Time between running the check (ms|s|m|h)",
            "--health-retries": "Consecutive failures needed to report unhealthy",
            "--health-start-period": "Start period for the container to initialize before counting retries towards unstable (ms|s|m|h)",
            "--health-timeout": "Maximum time to allow one check to run (ms|s|m|h)",
            "--host": "Set one or more custom host-to-IP mappings (host:ip)",
            "--hostname": "Container hostname",
            "--init": "Use an init inside each service container to forward signals and reap processes",
            "--isolation": "Service container isolation mode",
            "-l|--label": "Service labels",
            "--limit-cpu": "Limit CPUs",
            "--limit-memory": "Limit Memory",
            "--limit-pids": "Limit maximum number of processes (default 0 = unlimited)",
            "--log-driver": "Logging driver for service",
            "--log-opt": "Logging driver options",
            "--max-concurrent": "Number of job tasks to run concurrently (default equal to --replicas)",
            "--mode": "Service mode (replicated, global, replicated-job, or global-job) (default "
            replicated ")",
            "--mount": "Attach a filesystem mount to the service",
            "--name": "Service name",
            "--network": "Network attachments",
            "--no-healthcheck": "Disable any container-specified HEALTHCHECK",
            "--no-resolve-image": "Do not query the registry to resolve image digest and supported platforms",
            "--placement-pref": "Add a placement preference",
            "-p|--publish": "Publish a port as a node port",
            "-q|--quiet": "Suppress progress output",
            "--read-only": "Mount the container's root filesystem as read only",
            "--replicas": "Number of tasks",
            "--replicas-max-per-node": "Maximum number of tasks per node (default 0 = unlimited)",
            "--reserve-cpu": "Reserve CPUs",
            "--reserve-memory": "Reserve Memory",
            "--restart-condition": "Restart when condition is met ("
            none "|"
            on - failure "|"
            any ") (default "
            any ")",
            "--restart-delay": "Delay between restart attempts (ns|us|ms|s|m|h) (default 5s)",
            "--restart-max-attempts": "Maximum number of restarts before giving up",
            "--restart-window": "Window used to evaluate the restart policy (ns|us|ms|s|m|h)",
            "--rollback-delay": "Delay between task rollbacks (ns|us|ms|s|m|h) (default 0s)",
            "--rollback-failure-action": "Action on rollback failure ("
            pause "|"
            continue ") (default "
            pause ")",
            "--rollback-max-failure-ratio": "Failure rate to tolerate during a rollback (default 0)",
            "--rollback-monitor": "Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h) (default 5s)",
            "--rollback-order": "Rollback order ("
            start - first "|"
            stop - first ") (default "
            stop - first ")",
            "--rollback-parallelism": "Maximum number of tasks rolled back simultaneously (0 to roll back all at once) (default 1)",
            "--secret": "Specify secrets to expose to the service",
            "--stop-grace-period": "Time to wait before force killing a container (ns|us|ms|s|m|h) (default 10s)",
            "--stop-signal": "Signal to stop the container",
            "--sysctl": "Sysctl options",
            "-t|--tty": "Allocate a pseudo-TTY",
            "--ulimit": "Ulimit options (default [])",
            "--update-delay": "Delay between updates (ns|us|ms|s|m|h) (default 0s)",
            "--update-failure-action": "Action on update failure ("
            pause "|"
            continue "|"
            rollback ") (default "
            pause ")",
            "--update-max-failure-ratio": "Failure rate to tolerate during an update (default 0)",
            "--update-monitor": "Duration after each task update to monitor for failure (ns|us|ms|s|m|h) (default 5s)",
            "--update-order": "Update order ("
            start - first "|"
            stop - first ") (default "
            stop - first ")",
            "--update-parallelism": "Maximum number of tasks updated simultaneously (0 to update all at once) (default 1)",
            "-u|--user": "Username or UID (format: group|gid>])",
            "--with-registry-auth": "Send registry authentication details to swarm agents",
            "-w|--workdir": "Working directory inside the container",
            "#desc": "Create a new service"
        },
        "inspect": {
            "-f|--format": "Format the output using the given Go template",
            "--pretty": "Print the information in a human friendly format",
            "#desc": "Display detailed information on one or more services"
        },
        "logs": {
            "--details": "Show extra details provided to logs",
            "-f|--follow": "Follow log output",
            "--no-resolve": "Do not map IDs to Names in output",
            "--no-task-ids": "Do not include task IDs in output",
            "--no-trunc": "Do not truncate output",
            "--raw": "Do not neatly format logs",
            "--since": "Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)",
            "-n|--tail": "Number of lines to show from the end of the logs (default "
            all ")",
            "-t|--timestamps": "Show timestamps",
            "#desc": "Fetch the logs of a service or task"
        },
        "ls": {
            "-f|--filter": "Filter output based on conditions provided",
            "--format": "Pretty-print services using a Go template",
            "-q|--quiet": "Only display IDs",
            "#desc": "List services"
        },
        "ps": {
            "-f|--filter": "Filter output based on conditions provided",
            "--format": "Pretty-print tasks using a Go template",
            "--no-resolve": "Do not map IDs to Names",
            "--no-trunc": "Do not truncate output",
            "-q|--quiet": "Only display task IDs",
            "#desc": "List the tasks of one or more services"
        },
        "rm": {
            "#desc": "Remove one or more services"
        },
        "rollback": {
            "-d|--detach": "Exit immediately instead of waiting for the service to converge",
            "-q|--quiet": "Suppress progress output",
            "#desc": "Revert changes to a service's configuration"
        },
        "scale": {
            "-d|--detach": "Exit immediately instead of waiting for the service to converge",
            "#desc": "Scale one or multiple replicated services"
        },
        "update": {
            "--args": "Service command args",
            "--cap-add": "Add Linux capabilities",
            "--cap-drop": "Drop Linux capabilities",
            "--config-add": "Add or update a config file on a service",
            "--config-rm": "Remove a configuration file",
            "--constraint-add": "Add or update a placement constraint",
            "--constraint-rm": "Remove a constraint",
            "--container-label-add": "Add or update a container label",
            "--container-label-rm": "Remove a container label by its key",
            "--credential-spec": "Credential spec for managed service account (Windows only)",
            "-d|--detach": "Exit immediately instead of waiting for the service to converge",
            "--dns-add": "Add or update a custom DNS server",
            "--dns-option-add": "Add or update a DNS option",
            "--dns-option-rm": "Remove a DNS option",
            "--dns-rm": "Remove a custom DNS server",
            "--dns-search-add": "Add or update a custom DNS search domain",
            "--dns-search-rm": "Remove a DNS search domain",
            "--endpoint-mode": "Endpoint mode (vip or dnsrr)",
            "--entrypoint": "Overwrite the default ENTRYPOINT of the image",
            "--env-add": "Add or update an environment variable",
            "--env-rm": "Remove an environment variable",
            "--force": "Force update even if no changes require it",
            "--generic-resource-add": "Add a Generic resource",
            "--generic-resource-rm": "Remove a Generic resource",
            "--group-add": "Add an additional supplementary user group to the container",
            "--group-rm": "Remove a previously added supplementary user group from the container",
            "--health-cmd": "Command to run to check health",
            "--health-interval": "Time between running the check (ms|s|m|h)",
            "--health-retries": "Consecutive failures needed to report unhealthy",
            "--health-start-period": "Start period for the container to initialize before counting retries towards unstable (ms|s|m|h)",
            "--health-timeout": "Maximum time to allow one check to run (ms|s|m|h)",
            "--host-add": "Add a custom host-to-IP mapping (host:ip)",
            "--host-rm": "Remove a custom host-to-IP mapping (host:ip)",
            "--hostname": "Container hostname",
            "--image": "Service image tag",
            "--init": "Use an init inside each service container to forward signals and reap processes",
            "--isolation": "Service container isolation mode",
            "--label-add": "Add or update a service label",
            "--label-rm": "Remove a label by its key",
            "--limit-cpu": "Limit CPUs",
            "--limit-memory": "Limit Memory",
            "--limit-pids": "Limit maximum number of processes (default 0 = unlimited)",
            "--log-driver": "Logging driver for service",
            "--log-opt": "Logging driver options",
            "--max-concurrent": "Number of job tasks to run concurrently (default equal to --replicas)",
            "--mount-add": "Add or update a mount on a service",
            "--mount-rm": "Remove a mount by its target path",
            "--network-add": "Add a network",
            "--network-rm": "Remove a network",
            "--no-healthcheck": "Disable any container-specified HEALTHCHECK",
            "--no-resolve-image": "Do not query the registry to resolve image digest and supported platforms",
            "--placement-pref-add": "Add a placement preference",
            "--placement-pref-rm": "Remove a placement preference",
            "--publish-add": "Add or update a published port",
            "--publish-rm": "Remove a published port by its target port",
            "-q|--quiet": "Suppress progress output",
            "--read-only": "Mount the container's root filesystem as read only",
            "--replicas": "Number of tasks",
            "--replicas-max-per-node": "Maximum number of tasks per node (default 0 = unlimited)",
            "--reserve-cpu": "Reserve CPUs",
            "--reserve-memory": "Reserve Memory",
            "--restart-condition": "Restart when condition is met ("
            none "|"
            on - failure "|"
            any ")",
            "--restart-delay": "Delay between restart attempts (ns|us|ms|s|m|h)",
            "--restart-max-attempts": "Maximum number of restarts before giving up",
            "--restart-window": "Window used to evaluate the restart policy (ns|us|ms|s|m|h)",
            "--rollback": "Rollback to previous specification",
            "--rollback-delay": "Delay between task rollbacks (ns|us|ms|s|m|h)",
            "--rollback-failure-action": "Action on rollback failure ("
            pause "|"
            continue ")",
            "--rollback-max-failure-ratio": "Failure rate to tolerate during a rollback",
            "--rollback-monitor": "Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h)",
            "--rollback-order": "Rollback order ("
            start - first "|"
            stop - first ")",
            "--rollback-parallelism": "Maximum number of tasks rolled back simultaneously (0 to roll back all at once)",
            "--secret-add": "Add or update a secret on a service",
            "--secret-rm": "Remove a secret",
            "--stop-grace-period": "Time to wait before force killing a container (ns|us|ms|s|m|h)",
            "--stop-signal": "Signal to stop the container",
            "--sysctl-add": "Add or update a Sysctl option",
            "--sysctl-rm": "Remove a Sysctl option",
            "-t|--tty": "Allocate a pseudo-TTY",
            "--ulimit-add": "Add or update a ulimit option (default [])",
            "--ulimit-rm": "Remove a ulimit option",
            "--update-delay": "Delay between updates (ns|us|ms|s|m|h)",
            "--update-failure-action": "Action on update failure ("
            pause "|"
            continue "|"
            rollback ")",
            "--update-max-failure-ratio": "Failure rate to tolerate during an update",
            "--update-monitor": "Duration after each task update to monitor for failure (ns|us|ms|s|m|h)",
            "--update-order": "Update order ("
            start - first "|"
            stop - first ")",
            "--update-parallelism": "Maximum number of tasks updated simultaneously (0 to update all at once)",
            "-u|--user": "Username or UID (format: group|gid>])",
            "--with-registry-auth": "Send registry authentication details to swarm agents",
            "-w|--workdir": "Working directory inside the container",
            "#desc": "Update a service"
        },
        "#desc": "Manage services"
    },
    "stack": {
        "--orchestrator": "Orchestrator to use (swarm|kubernetes|all)",
        "deploy": {
            "-c|--compose-file": "Path to a Compose file, or " - " to read from stdin",
            "--orchestrator": "Orchestrator to use (swarm|kubernetes|all)",
            "--prune": "Prune services that are no longer referenced",
            "--resolve-image": "Query the registry to resolve image digest and supported platforms ("
            always "|"
            changed "|"
            never ") (default "
            always ")",
            "--with-registry-auth": "Send registry authentication details to Swarm agents",
            "#desc": "Deploy a new stack or update an existing stack"
        },
        "ls": {
            "--format": "Pretty-print stacks using a Go template",
            "--orchestrator": "Orchestrator to use (swarm|kubernetes|all)",
            "#desc": "List stacks"
        },
        "ps": {
            "-f|--filter": "Filter output based on conditions provided",
            "--format": "Pretty-print tasks using a Go template",
            "--no-resolve": "Do not map IDs to Names",
            "--no-trunc": "Do not truncate output",
            "--orchestrator": "Orchestrator to use (swarm|kubernetes|all)",
            "-q|--quiet": "Only display task IDs",
            "#desc": "List the tasks in the stack"
        },
        "rm": {
            "--orchestrator": "Orchestrator to use (swarm|kubernetes|all)",
            "#desc": "Remove one or more stacks"
        },
        "services": {
            "-f|--filter": "Filter output based on conditions provided",
            "--format": "Pretty-print services using a Go template",
            "--orchestrator": "Orchestrator to use (swarm|kubernetes|all)",
            "-q|--quiet": "Only display IDs",
            "#desc": "List the services in the stack"
        },
        "#desc": "Manage Docker stacks"
    },
    "swarm": {
        "ca": {
            "--ca-cert": "Path to the PEM-formatted root CA certificate to use for the new cluster",
            "--ca-key": "Path to the PEM-formatted root CA key to use for the new cluster",
            "--cert-expiry": "Validity period for node certificates (ns|us|ms|s|m|h) (default 2160h0m0s)",
            "-d|--detach": "Exit immediately instead of waiting for the root rotation to converge",
            "--external-ca": "Specifications of one or more certificate signing endpoints",
            "-q|--quiet": "Suppress progress output",
            "--rotate": "Rotate the swarm CA - if no certificate or key are provided, new ones will be generated",
            "#desc": "Display and rotate the root CA"
        },
        "init": {
            "--advertise-addr": "Advertised address (format: ort])",
            "--autolock": "Enable manager autolocking (requiring an unlock key to start a stopped manager)",
            "--availability": "Availability of the node ("
            active "|"
            pause "|"
            drain ") (default "
            active ")",
            "--cert-expiry": "Validity period for node certificates (ns|us|ms|s|m|h) (default 2160h0m0s)",
            "--data-path-addr": "Address or interface to use for data path traffic (format: <ip|interface>)",
            "--data-path-port": "Port number to use for data path traffic (1024 - 49151). If no value is set or is set to 0, the default port (4789) is used.",
            "--default-addr-pool": "CIDR format (default [])",
            "--default-addr-pool-mask-length": "CIDR format (default [])",
            "--dispatcher-heartbeat": "Dispatcher heartbeat period (ns|us|ms|s|m|h) (default 5s)",
            "--external-ca": "Specifications of one or more certificate signing endpoints",
            "--force-new-cluster": "Force create a new cluster from current state",
            "--listen-addr": "Listen address (format: ort]) (default 0.0.0.0:2377)",
            "--max-snapshots": "Number of additional Raft snapshots to retain",
            "--snapshot-interval": "Number of log entries between Raft snapshots (default 10000)",
            "--task-history-limit": "Task history retention limit (default 5)",
            "#desc": "Initialize a swarm"
        },
        "join": {
            "--advertise-addr": "Advertised address (format: ort])",
            "--availability": "Availability of the node ("
            active "|"
            pause "|"
            drain ") (default "
            active ")",
            "--data-path-addr": "Address or interface to use for data path traffic (format: <ip|interface>)",
            "--listen-addr": "Listen address (format: ort]) (default 0.0.0.0:2377)",
            "--token": "Token for entry into the swarm",
            "#desc": "Join a swarm as a node and/or manager"
        },
        "join-token": {
            "-q|--quiet": "Only display token",
            "--rotate": "Rotate join token",
            "#desc": "Manage join tokens"
        },
        "leave": {
            "-f|--force": "Force this node to leave the swarm, ignoring warnings",
            "#desc": "Leave the swarm"
        },
        "unlock": {
            "#desc": "Unlock swarm"
        },
        "unlock-key": {
            "-q|--quiet": "Only display token",
            "--rotate": "Rotate unlock key",
            "#desc": "Manage the unlock key"
        },
        "update": {
            "--autolock": "Change manager autolocking setting (true|false)",
            "--cert-expiry": "Validity period for node certificates (ns|us|ms|s|m|h) (default 2160h0m0s)",
            "--dispatcher-heartbeat": "Dispatcher heartbeat period (ns|us|ms|s|m|h) (default 5s)",
            "--external-ca": "Specifications of one or more certificate signing endpoints",
            "--max-snapshots": "Number of additional Raft snapshots to retain",
            "--snapshot-interval": "Number of log entries between Raft snapshots (default 10000)",
            "--task-history-limit": "Task history retention limit (default 5)",
            "#desc": "Update the swarm"
        },
        "#desc": "Manage Swarm"
    },
    "system": {
        "df": {
            "--format": "Pretty-print images using a Go template",
            "-v|--verbose": "Show detailed information on space usage",
            "#desc": "Show docker disk usage"
        },
        "events": {
            "-f|--filter": "Filter output based on conditions provided",
            "--format": "Format the output using the given Go template",
            "--since": "Show all events created since timestamp",
            "--until": "Stream events until this timestamp",
            "#desc": "Get real time events from the server"
        },
        "info": {
            "-f|--format": "Format the output using the given Go template",
            "#desc": "Display system-wide information"
        },
        "prune": {
            "-a|--all": "Remove all unused images not just dangling ones",
            "--filter": "Provide filter values (e.g. 'label=alue>')",
            "-f|--force": "Do not prompt for confirmation",
            "--volumes": "Prune volumes",
            "#desc": "Remove unused data"
        },
        "#desc": "Manage Docker"
    },
    "trust": {
        "key": {
            "generate": {
                "--dir": "Directory to generate key in, defaults to current directory",
                "#desc": "Generate and load a signing key-pair"
            },
            "load": {
                "--name": "Name for the loaded key (default "
                signer ")",
                "#desc": "Load a private key file for signing"
            },
            "#desc": "Manage keys for signing Docker images"
        },
        "signer": {
            "add": {
                "--key": "Path to the signer's public key file",
                "#desc": "Add a signer"
            },
            "remove": {
                "-f|--force": "Do not prompt for confirmation before removing the most recent signer",
                "#desc": "Remove a signer"
            },
            "#desc": "Manage entities who can sign Docker images"
        },
        "inspect": {
            "--pretty": "Print the information in a human friendly format",
            "#desc": "Return low-level information about keys and signatures"
        },
        "revoke": {
            "-y|--yes": "Do not prompt for confirmation",
            "#desc": "Remove trust for an image"
        },
        "sign": {
            "--local": "Sign a locally tagged image",
            "#desc": "Sign an image"
        },
        "#desc": "Manage trust on Docker images"
    },
    "volume": {
        "create": {
            "-d|--driver": "Specify volume driver name (default "
            local ")",
            "--label": "Set metadata for a volume",
            "-o|--opt": "Set driver specific options (default map[])",
            "#desc": "Create a volume"
        },
        "inspect": {
            "-f|--format": "Format the output using the given Go template",
            "#desc": "Display detailed information on one or more volumes"
        },
        "ls": {
            "-f|--filter": "Provide filter values (e.g. 'dangling=true')",
            "--format": "Pretty-print volumes using a Go template",
            "-q|--quiet": "Only display volume names",
            "#desc": "List volumes"
        },
        "prune": {
            "--filter": "Provide filter values (e.g. 'label=<label>')",
            "-f|--force": "Do not prompt for confirmation",
            "#desc": "Remove all unused local volumes"
        },
        "rm": {
            "-f|--force": "Force the removal of one or more volumes",
            "#desc": "Remove one or more volumes"
        },
        "#desc": "Manage volumes"
    },
    "attach": {
        "--detach-keys": "Override the key sequence for detaching a container",
        "--no-stdin": "Do not attach STDIN",
        "--sig-proxy": "Proxy all received signals to the process (default true)",
        "#desc": "Attach local standard input, output, and error streams to a running container"
    },
    "build": {
        "--add-host": "Add a custom host-to-IP mapping (host:ip)",
        "--build-arg": "Set build-time variables",
        "--cache-from": "Images to consider as cache sources",
        "--disable-content-trust": "Skip image verification (default true)",
        "-f|--file": "Name of the Dockerfile (Default is 'PATH/Dockerfile')",
        "--iidfile": "Write the image ID to the file",
        "--isolation": "Container isolation technology",
        "--label": "Set metadata for an image",
        "--network": "Set the networking mode for the RUN instructions during build (default "
        default ")",
        "--no-cache": "Do not use cache when building the image",
        "-o|--output": "Output destination (format: type=local,dest=path)",
        "--platform": "Set platform if server is multi-platform capable",
        "--progress": "Set type of progress output (auto, plain, tty). Use plain to show container output (default "
        auto ")",
        "--pull": "Always attempt to pull a newer version of the image",
        "-q|--quiet": "Suppress the build output and print image ID on success",
        "--secret": "Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret",
        "--ssh": "SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|",
        "-t|--tag": "Name and optionally a tag in the 'name:tag' format",
        "--target": "Set the target build stage to build.",
        "#desc": "Build an image from a Dockerfile"
    },
    "commit": {
        "-a|--author": "Author (e.g., "
        John Hannibal Smith < hannibal @a - team.com > ")",
        "-c|--change": "Apply Dockerfile instruction to the created image",
        "-m|--message": "Commit message",
        "-p|--pause": "Pause container during commit (default true)",
        "#desc": "Create a new image from a container's changes"
    },
    "cp": {
        "-a|--archive": "Archive mode (copy all uid/gid information)",
        "-L|--follow-link": "Always follow symbol link in SRC_PATH",
        "#desc": "Copy files/folders between a container and the local filesystem"
    },
    "create": {
        "--add-host": "Add a custom host-to-IP mapping (host:ip)",
        "-a|--attach": "Attach to STDIN, STDOUT or STDERR",
        "--blkio-weight": "Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)",
        "--blkio-weight-device": "Block IO weight (relative device weight) (default [])",
        "--cap-add": "Add Linux capabilities",
        "--cap-drop": "Drop Linux capabilities",
        "--cgroup-parent": "Optional parent cgroup for the container",
        "--cgroupns": "Cgroup namespace to use (host|private)",
        "--cidfile": "Write the container ID to the file",
        "--cpu-period": "Limit CPU CFS (Completely Fair Scheduler) period",
        "--cpu-quota": "Limit CPU CFS (Completely Fair Scheduler) quota",
        "--cpu-rt-period": "Limit CPU real-time period in microseconds",
        "--cpu-rt-runtime": "Limit CPU real-time runtime in microseconds",
        "-c|--cpu-shares": "CPU shares (relative weight)",
        "--cpus": "Number of CPUs",
        "--cpuset-cpus": "CPUs in which to allow execution (0-3, 0,1)",
        "--cpuset-mems": "MEMs in which to allow execution (0-3, 0,1)",
        "--device": "Add a host device to the container",
        "--device-cgroup-rule": "Add a rule to the cgroup allowed devices list",
        "--device-read-bps": "Limit read rate (bytes per second) from a device (default [])",
        "--device-read-iops": "Limit read rate (IO per second) from a device (default [])",
        "--device-write-bps": "Limit write rate (bytes per second) to a device (default [])",
        "--device-write-iops": "Limit write rate (IO per second) to a device (default [])",
        "--disable-content-trust": "Skip image verification (default true)",
        "--dns": "Set custom DNS servers",
        "--dns-option": "Set DNS options",
        "--dns-search": "Set custom DNS search domains",
        "--domainname": "Container NIS domain name",
        "--entrypoint": "Overwrite the default ENTRYPOINT of the image",
        "-e|--env": "Set environment variables",
        "--env-file": "Read in a file of environment variables",
        "--expose": "Expose a port or a range of ports",
        "--gpus": "GPU devices to add to the container ('all' to pass all GPUs)",
        "--group-add": "Add additional groups to join",
        "--health-cmd": "Command to run to check health",
        "--health-interval": "Time between running the check (ms|s|m|h) (default 0s)",
        "--health-retries": "Consecutive failures needed to report unhealthy",
        "--health-start-period": "Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)",
        "--health-timeout": "Maximum time to allow one check to run (ms|s|m|h) (default 0s)",
        "--help": "Print usage",
        "-h|--hostname": "Container host name",
        "--init": "Run an init inside the container that forwards signals and reaps processes",
        "-i|--interactive": "Keep STDIN open even if not attached",
        "--ip": "IPv4 address (e.g., 172.30.100.104)",
        "--ip6": "IPv6 address (e.g., 2001:db8::33)",
        "--ipc": "IPC mode to use",
        "--isolation": "Container isolation technology",
        "--kernel-memory": "Kernel memory limit",
        "-l|--label": "Set meta data on a container",
        "--label-file": "Read in a line delimited file of labels",
        "--link": "Add link to another container",
        "--link-local-ip": "Container IPv4/IPv6 link-local addresses",
        "--log-driver": "Logging driver for the container",
        "--log-opt": "Log driver options",
        "--mac-address": "Container MAC address (e.g., 92:d0:c6:0a:29:33)",
        "-m|--memory": "Memory limit",
        "--memory-reservation": "Memory soft limit",
        "--memory-swap": "Swap limit equal to memory plus swap: '-1' to enable unlimited swap",
        "--memory-swappiness": "Tune container memory swappiness (0 to 100) (default -1)",
        "--mount": "Attach a filesystem mount to the container",
        "--name": "Assign a name to the container",
        "--network": "Connect a container to a network",
        "--network-alias": "Add network-scoped alias for the container",
        "--no-healthcheck": "Disable any container-specified HEALTHCHECK",
        "--oom-kill-disable": "Disable OOM Killer",
        "--oom-score-adj": "Tune host's OOM preferences (-1000 to 1000)",
        "--pid": "PID namespace to use",
        "--pids-limit": "Tune container pids limit (set -1 for unlimited)",
        "--platform": "Set platform if server is multi-platform capable",
        "--privileged": "Give extended privileges to this container",
        "-p|--publish": "Publish a container's port(s) to the host",
        "-P|--publish-all": "Publish all exposed ports to random ports",
        "--pull": "Pull image before creating ("
        always "|"
        missing "|"
        never ") (default "
        missing ")",
        "--read-only": "Mount the container's root filesystem as read only",
        "--restart": "Restart policy to apply when a container exits (default "
        no ")",
        "--rm": "Automatically remove the container when it exits",
        "--runtime": "Runtime to use for this container",
        "--security-opt": "Security Options",
        "--shm-size": "Size of /dev/shm",
        "--stop-signal": "Signal to stop a container (default "
        SIGTERM ")",
        "--stop-timeout": "Timeout (in seconds) to stop a container",
        "--storage-opt": "Storage driver options for the container",
        "--sysctl": "Sysctl options (default map[])",
        "--tmpfs": "Mount a tmpfs directory",
        "-t|--tty": "Allocate a pseudo-TTY",
        "--ulimit": "Ulimit options (default [])",
        "-u|--user": "Username or UID (format: group|gid>])",
        "--userns": "User namespace to use",
        "--uts": "UTS namespace to use",
        "-v|--volume": "Bind mount a volume",
        "--volume-driver": "Optional volume driver for the container",
        "--volumes-from": "Mount volumes from the specified container(s)",
        "-w|--workdir": "Working directory inside the container",
        "#desc": "Create a new container"
    },
    "diff": {
        "#desc": "Inspect changes to files or directories on a container's filesystem"
    },
    "events": {
        "-f|--filter": "Filter output based on conditions provided",
        "--format": "Format the output using the given Go template",
        "--since": "Show all events created since timestamp",
        "--until": "Stream events until this timestamp",
        "#desc": "Get real time events from the server"
    },
    "exec": {
        "-d|--detach": "Detached mode: run command in the background",
        "--detach-keys": "Override the key sequence for detaching a container",
        "-e|--env": "Set environment variables",
        "--env-file": "Read in a file of environment variables",
        "-i|--interactive": "Keep STDIN open even if not attached",
        "--privileged": "Give extended privileges to the command",
        "-t|--tty": "Allocate a pseudo-TTY",
        "-u|--user": "Username or UID (format: group|gid>])",
        "-w|--workdir": "Working directory inside the container",
        "#desc": "Run a command in a running container"
    },
    "export": {
        "-o|--output": "Write to a file, instead of STDOUT",
        "#desc": "Export a container's filesystem as a tar archive"
    },
    "history": {
        "--format": "Pretty-print images using a Go template",
        "-H|--human": "Print sizes and dates in human readable format (default true)",
        "--no-trunc": "Don't truncate output",
        "-q|--quiet": "Only show image IDs",
        "#desc": "Show the history of an image"
    },
    "images": {
        "-a|--all": "Show all images (default hides intermediate images)",
        "--digests": "Show digests",
        "-f|--filter": "Filter output based on conditions provided",
        "--format": "Pretty-print images using a Go template",
        "--no-trunc": "Don't truncate output",
        "-q|--quiet": "Only show image IDs",
        "#desc": "List images"
    },
    "import": {
        "-c|--change": "Apply Dockerfile instruction to the created image",
        "-m|--message": "Set commit message for imported image",
        "--platform": "Set platform if server is multi-platform capable",
        "#desc": "Import the contents from a tarball to create a filesystem image"
    },
    "info": {
        "-f|--format": "Format the output using the given Go template",
        "#desc": "Display system-wide information"
    },
    "inspect": {
        "-f|--format": "Format the output using the given Go template",
        "-s|--size": "Display total file sizes if the type is container",
        "--type": "Return JSON for specified type",
        "#desc": "Return low-level information on Docker objects"
    },
    "kill": {
        "-s|--signal": "Signal to send to the container (default "
        KILL ")",
        "#desc": "Kill one or more running containers"
    },
    "load": {
        "-i|--input": "Read from tar archive file, instead of STDIN",
        "-q|--quiet": "Suppress the load output",
        "#desc": "Load an image from a tar archive or STDIN"
    },
    "login": {
        "azure": {
            "--client-id": "Client ID for Service principal login",
            "--client-secret": "Client secret for Service principal login",
            "--cloud-name": "Name of a registered Azure cloud [AzureCloud | AzureChinaCloud | AzureGermanCloud | AzureUSGovernment] (AzureCloud by default)",
            "-h|--help": "Help for azure",
            "--tenant-id": "Specify tenant ID to use",
            "#desc": "Log in to azure"
        },
        "-h|--help": "Help for login",
        "-p|--password": "Help for login",
        "--password-stdin": "Take the password from stdin",
        "-u|--username": "Take the password from stdin",
        "#desc": "Log in to a Docker registry"
    },
    "logout": {
        "azure": {
            "-h|--help": "Help for azure",
            "#desc": "Logout from Azure"
        },
        "-h|--help": "Help for logout",
        "#desc": "Log out from a Docker registry"
    },
    "logs": {
        "--details": "Show extra details provided to logs",
        "-f|--follow": "Follow log output",
        "--since": "Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)",
        "-n|--tail": "Number of lines to show from the end of the logs (default "
        all ")",
        "-t|--timestamps": "Show timestamps",
        "--until": "Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)",
        "#desc": "Fetch the logs of a container"
    },
    "pause": {
        "#desc": "Pause all processes within one or more containers"
    },
    "port": {
        "#desc": "List port mappings or a specific mapping for the container"
    },
    "ps": {
        "-a|--all": "Show all containers (default shows just running)",
        "-f|--filter": "Filter output based on conditions provided",
        "--format": "Pretty-print containers using a Go template",
        "-n|--last": "Show n last created containers (includes all states) (default -1)",
        "-l|--latest": "Show the latest created container (includes all states)",
        "--no-trunc": "Don't truncate output",
        "-q|--quiet": "Only display container IDs",
        "-s|--size": "Display total file sizes",
        "#desc": "List containers"
    },
    "pull": {
        "-a|--all-tags": "Download all tagged images in the repository",
        "--disable-content-trust": "Skip image verification (default true)",
        "--platform": "Set platform if server is multi-platform capable",
        "-q|--quiet": "Suppress verbose output",
        "#desc": "Pull an image or a repository from a registry"
    },
    "push": {
        "-a|--all-tags": "Push all tagged images in the repository",
        "--disable-content-trust": "Skip image signing (default true)",
        "-q|--quiet": "Suppress verbose output",
        "#desc": "Push an image or a repository to a registry"
    },
    "rename": {
        "#desc": "Rename a container"
    },
    "restart": {
        "-t|--time": "Seconds to wait for stop before killing the container (default 10)",
        "#desc": "Restart one or more containers"
    },
    "rm": {
        "-f|--force": "Force the removal of a running container (uses SIGKILL)",
        "-l|--link": "Remove the specified link",
        "-v|--volumes": "Remove anonymous volumes associated with the container",
        "#desc": "Remove one or more containers"
    },
    "rmi": {
        "-f|--force": "Force removal of the image",
        "--no-prune": "Do not delete untagged parents",
        "#desc": "Remove one or more images"
    },
    "run": {
        "--add-host": "Add a custom host-to-IP mapping (host:ip)",
        "-a|--attach": "Attach to STDIN, STDOUT or STDERR",
        "--blkio-weight": "Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)",
        "--blkio-weight-device": "Block IO weight (relative device weight) (default [])",
        "--cap-add": "Add Linux capabilities",
        "--cap-drop": "Drop Linux capabilities",
        "--cgroup-parent": "Optional parent cgroup for the container",
        "--cgroupns": "Cgroup namespace to use (host|private)",
        "--cidfile": "Write the container ID to the file",
        "--cpu-period": "Limit CPU CFS (Completely Fair Scheduler) period",
        "--cpu-quota": "Limit CPU CFS (Completely Fair Scheduler) quota",
        "--cpu-rt-period": "Limit CPU real-time period in microseconds",
        "--cpu-rt-runtime": "Limit CPU real-time runtime in microseconds",
        "-c|--cpu-shares": "CPU shares (relative weight)",
        "--cpus": "Number of CPUs",
        "--cpuset-cpus": "CPUs in which to allow execution (0-3, 0,1)",
        "--cpuset-mems": "MEMs in which to allow execution (0-3, 0,1)",
        "-d|--detach": "Run container in background and print container ID",
        "--detach-keys": "Override the key sequence for detaching a container",
        "--device": "Add a host device to the container",
        "--device-cgroup-rule": "Add a rule to the cgroup allowed devices list",
        "--device-read-bps": "Limit read rate (bytes per second) from a device (default [])",
        "--device-read-iops": "Limit read rate (IO per second) from a device (default [])",
        "--device-write-bps": "Limit write rate (bytes per second) to a device (default [])",
        "--device-write-iops": "Limit write rate (IO per second) to a device (default [])",
        "--disable-content-trust": "Skip image verification (default true)",
        "--dns": "Set custom DNS servers",
        "--dns-option": "Set DNS options",
        "--dns-search": "Set custom DNS search domains",
        "--domainname": "Container NIS domain name",
        "--entrypoint": "Overwrite the default ENTRYPOINT of the image",
        "-e|--env": "Set environment variables",
        "--env-file": "Read in a file of environment variables",
        "--expose": "Expose a port or a range of ports",
        "--gpus": "GPU devices to add to the container ('all' to pass all GPUs)",
        "--group-add": "Add additional groups to join",
        "--health-cmd": "Command to run to check health",
        "--health-interval": "Time between running the check (ms|s|m|h) (default 0s)",
        "--health-retries": "Consecutive failures needed to report unhealthy",
        "--health-start-period": "Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)",
        "--health-timeout": "Maximum time to allow one check to run (ms|s|m|h) (default 0s)",
        "--help": "Print usage",
        "-h|--hostname": "Container host name",
        "--init": "Run an init inside the container that forwards signals and reaps processes",
        "-i|--interactive": "Keep STDIN open even if not attached",
        "--ip": "IPv4 address (e.g., 172.30.100.104)",
        "--ip6": "IPv6 address (e.g., 2001:db8::33)",
        "--ipc": "IPC mode to use",
        "--isolation": "Container isolation technology",
        "--kernel-memory": "Kernel memory limit",
        "-l|--label": "Set meta data on a container",
        "--label-file": "Read in a line delimited file of labels",
        "--link": "Add link to another container",
        "--link-local-ip": "Container IPv4/IPv6 link-local addresses",
        "--log-driver": "Logging driver for the container",
        "--log-opt": "Log driver options",
        "--mac-address": "Container MAC address (e.g., 92:d0:c6:0a:29:33)",
        "-m|--memory": "Memory limit",
        "--memory-reservation": "Memory soft limit",
        "--memory-swap": "Swap limit equal to memory plus swap: '-1' to enable unlimited swap",
        "--memory-swappiness": "Tune container memory swappiness (0 to 100) (default -1)",
        "--mount": "Attach a filesystem mount to the container",
        "--name": "Assign a name to the container",
        "--network": "Connect a container to a network",
        "--network-alias": "Add network-scoped alias for the container",
        "--no-healthcheck": "Disable any container-specified HEALTHCHECK",
        "--oom-kill-disable": "Disable OOM Killer",
        "--oom-score-adj": "Tune host's OOM preferences (-1000 to 1000)",
        "--pid": "PID namespace to use",
        "--pids-limit": "Tune container pids limit (set -1 for unlimited)",
        "--platform": "Set platform if server is multi-platform capable",
        "--privileged": "Give extended privileges to this container",
        "-p|--publish": "Publish a container's port(s) to the host",
        "-P|--publish-all": "Publish all exposed ports to random ports",
        "--pull": "Pull image before running ("
        always "|"
        missing "|"
        never ") (default "
        missing ")",
        "--read-only": "Mount the container's root filesystem as read only",
        "--restart": "Restart policy to apply when a container exits (default "
        no ")",
        "--rm": "Automatically remove the container when it exits",
        "--runtime": "Runtime to use for this container",
        "--security-opt": "Security Options",
        "--shm-size": "Size of /dev/shm",
        "--sig-proxy": "Proxy received signals to the process (default true)",
        "--stop-signal": "Signal to stop a container (default "
        SIGTERM ")",
        "--stop-timeout": "Timeout (in seconds) to stop a container",
        "--storage-opt": "Storage driver options for the container",
        "--sysctl": "Sysctl options (default map[])",
        "--tmpfs": "Mount a tmpfs directory",
        "-t|--tty": "Allocate a pseudo-TTY",
        "--ulimit": "Ulimit options (default [])",
        "-u|--user": "Username or UID (format: group|gid>])",
        "--userns": "User namespace to use",
        "--uts": "UTS namespace to use",
        "-v|--volume": "Bind mount a volume",
        "--volume-driver": "Optional volume driver for the container",
        "--volumes-from": "Mount volumes from the specified container(s)",
        "-w|--workdir": "Working directory inside the container",
        "#desc": "Run a command in a new container"
    },
    "save": {
        "-o|--output": "Write to a file, instead of STDOUT",
        "#desc": "Save one or more images to a tar archive (streamed to STDOUT by default)"
    },
    "search": {
        "-f|--filter": "Filter output based on conditions provided",
        "--format": "Pretty-print search using a Go template",
        "--limit": "Max number of search results (default 25)",
        "--no-trunc": "Don't truncate output",
        "#desc": "Search the Docker Hub for images"
    },
    "start": {
        "-a|--attach": "Attach STDOUT/STDERR and forward signals",
        "--detach-keys": "Override the key sequence for detaching a container",
        "-i|--interactive": "Attach container's STDIN",
        "#desc": "Start one or more stopped containers"
    },
    "stats": {
        "-a|--all": "Show all containers (default shows just running)",
        "--format": "Pretty-print images using a Go template",
        "--no-stream": "Disable streaming stats and only pull the first result",
        "--no-trunc": "Do not truncate output",
        "#desc": "Display a live stream of container(s) resource usage statistics"
    },
    "stop": {
        "-t|--time": "Seconds to wait for stop before killing it (default 10)",
        "#desc": "Stop one or more running containers"
    },
    "tag": {
        "#desc": "Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE"
    },
    "top": {
        "#desc": "Display the running processes of a container"
    },
    "unpause": {
        "#desc": "Unpause all processes within one or more containers"
    },
    "update": {
        "--blkio-weight": "Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)",
        "--cpu-period": "Limit CPU CFS (Completely Fair Scheduler) period",
        "--cpu-quota": "Limit CPU CFS (Completely Fair Scheduler) quota",
        "--cpu-rt-period": "Limit the CPU real-time period in microseconds",
        "--cpu-rt-runtime": "Limit the CPU real-time runtime in microseconds",
        "-c|--cpu-shares": "CPU shares (relative weight)",
        "--cpus": "Number of CPUs",
        "--cpuset-cpus": "CPUs in which to allow execution (0-3, 0,1)",
        "--cpuset-mems": "MEMs in which to allow execution (0-3, 0,1)",
        "--kernel-memory": "Kernel memory limit",
        "-m|--memory": "Memory limit",
        "--memory-reservation": "Memory soft limit",
        "--memory-swap": "Swap limit equal to memory plus swap: '-1' to enable unlimited swap",
        "--pids-limit": "Tune container pids limit (set -1 for unlimited)",
        "--restart": "Restart policy to apply when a container exits",
        "#desc": "Update configuration of one or more containers"
    },
    "version": {
        "-f|--format": "Format the output. Values: [pretty | json]. (Default: pretty)",
        "-h|--help": "Help for version",
        "--kubeconfig": "Kubernetes config file",
        "#desc": "Show the Docker version information"
    },
    "wait": {
        "#desc": "Block until one or more containers stop, then print their exit codes"
    }
}